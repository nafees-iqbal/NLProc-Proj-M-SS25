[
    {
        "question": "What is the Java EE full form?",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n",
            "\uf0e0Hey, that\u2019s Java EE! \u2026 \nthe Servlet part of it.\n Src: Java EE 8 Spec\nJava 11 with Non-Servlet\nEnvironments available now\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nSrc: Java EE 8 Spec\nGAE Java Runtime - Previously\n10\nGoogle documentation:\n\u201cApp Engine runs your Java \nweb application using a Java \n7 JVM in a safe \"sandboxed\" \nenvironment. App Engine \ninvokes your app's servlet \nclasses to handle requests \nand prepare responses in this \nenvironment.\u201d\n \uf0e0Hey, that\u2019s Java EE! \u2026 \nthe Servlet part of it.\n cf. course unit\nIV-A, slide 3\nSrc: google.com, 2015\nSrc: google.com, 2016\nSrc: google.com, 2017\nJava 8 beta available\nas of Dec. 2017\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nInitial GAE Servlet Focus\n11\n\uf071Reuse of defined programming contract (Servlet spec.)\n \uf0a7Well-known API classes (HttpServlet, Filter, HttpSession)\n \uf0a7Standard application layout (WAR, web.xml)\n \uf0a7Standard programming limitations\n(Actually no file system access)\n\uf071In theory, Servlet-based artifacts can be reused\n\uf0a7Existing web applications\n\uf0a7Existing Servlet-based technologies\n\uf0a7JSP\n\uf0a7JSF\n\uf0a7Existing web frameworks\n\uf0a7Wicket\n\uf0a7MyFaces\n\uf0a7\u2026\nhttps://jcp.or\ng/en/jsr/detail\n? id=340\nhttp://www.jc\np.org/en/jsr/d\netail?id=154\nThere used to \nbe a \u201cWill-it-\nplay\u201d web site, \nbut it has been \ntaken offline\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE Java Runtime - Now\n12\n\uf071Provide an executable jar with:\n\uf0a7includes main-class that starts a web server\n\uf0a7web-server needs to be exposed on PORT variable\n\uf0a7Includes an app.yaml as deployment descriptor\n\uf0e0Less assumptions about environment, basically Java 17/21\n\uf0e0Less frequent adaptations to environment changes\n\uf0e0Less constraints on deployment model\n\uf0e0More flexibility in choosing the framework you want\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE follows an industry trend:\nless Java EE / Jakarta EE, more Spring\n13\ncf. Chapter 3\nslide 14\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE Java Runtime = Servlet Container?\n14\n\uf071Traditionally (before GAE), servlet \ncontainers such as (an \nembedded) Jetty or Tomcat were \nhosted with (more or less) full \ncontrol over the environment:\n\uf0a7You code the servlets\n\uf0a7You still control a lot of the host\u2019s \nresources (file system, sockets etc.)\n \uf071With GAE, your access is more \nlimited \u2026\nbecause\n\uf0a7Sandbox approach\n\uf0a7Standard management procedures\n\uf0e0However: 2nd Gen. Relaxations\nServlet-\nContainer\nDatabase\nEJB-\nContainer\nApp-Server\nMachine\nSockets\nServlet-\nContainer\nDatabase\nEJB-\nContainer\nApp-Server\nMachine\nSockets\nrelax\nrelax\nClass whitelist \nabandoned since\nJava 8 environment\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE Java Runtime = Java Web Server Environment\n15\nIn essence, the GAE Java Runtime is a managed environment for Java-centric \nWeb Servers:\n \uf071The application is clustered by default\n\uf0e0multiple web servers serve your app\n\uf0a7No sticky sessions\n\uf0a7Single-Threaded servlets per default\n\uf071Modification of standard request/response headers\n\uf071Limitations on processing time and request/response data size\n\uf071GAE deployment descriptors\n\uf071Asynchronous request execution via cloud tasks\n\uf071Warmstart procedures (GET /_ah/warmup)\n \uf071Cloud ecosystem for service management (logging, routing etc.)\n\u201ccloudified\u201d,\nif you want\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nRequest Header Modifications\n16\n\uf071The following headers are removed from the request:\n\uf0a7Accept-Encoding\n\uf0a7Connection\n\uf0a7Keep-Alive\n\uf0a7Proxy-Authorization\n\uf0a7Trailer\n\uf0a7Transfer-Encoding\n\uf071App Engine adds some headers, e.g.\n\uf0a7X-AppEngine-Country\n\uf0a7X-AppEngine-Region\n\uf0a7X-AppEngine-City\n\uf0a7X-AppEngine-CityLatLong\nSimilar modifications\nfor response headers\nthat relate to the interaction\nbetween client and server.\n See\nhttps://cloud.google.com/a\nppengine/docs/standard/ref\nerence/request-headers\nhttps://cloud.google.com/a\nppengine/docs/standard/ho\nw-requests-are-handled\nThis is COOL, but puts\nportability at risk!\n \uf0e0Is striving for portability\na resonable goal when\ncoding for GAE?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nServICE Scaling Options\n17\nScaling options to tailor scaling behavior\nNote: Goal should be to respond in milliseconds\n\uf0e0Be prepared for DeadlineExceededException\nhttps://cloud.google.com/a\nppengine/docs/standard/ja\nva11/how-instances-are-\nmanaged#scaling_types\nManual Scaling\nBasic Scaling\nAutomatic Scaling\nFeature\nSpecific number of \ninstances\nMinimum Cost\n(rather backend)\nMinimum Latency\n(rather frontend)\n Goal\nFixed number of \ninstances\nPer request instantiation\nPreemptive instantiation \nbased on KPIs, e.g.,\nrequest rate and \nlatencies\nScaling concept\nSame as basic\n24 hours\n(prev. 60 minutes)\n10 minutes\n(env. dependencies;\nprev. 60 seconds)\nMaximum Request \nTimeout\nYes\nYes\nNo\nBackground threads\nSame as basic\nPer instance, version and \nservice\nInstances are \nanonymous\nInstance addressability\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE Application Logging\n18\n\uf071Standard request log:\nAutomatically collected log of the app requests, acessible via Google\u2018s Cloud \nLogging\n\uf071Application-specific log\n\uf0a7Just use java.util.logging or Logback/SLF4J\n\uf0a7Use the typical log levels \n\uf0a7You COULD write to stdout and stderr, but please use a logger\n\uf071Note:\nGoogle offers Debugging and Profiling for the Cloud, but logs sometimes are the \nmain source for chasing misbehaving applications\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nFirestore\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGoogle Firestore\n20\nRemember that\nthe \u201ccloud\u201d uses \nlots of \nstandardized \nmachines to serve \nyour app \u2026 and \nyou take care that \nyour app is \ndistributable!\n Remember that\nGoogle Cloud\nStorage and Cloud\nSQL are available\nas alternatives!\n TS\n\uf071Firestore is a schemaless object/document store\n\uf071Automatic distribution across storage nodes\n\uf0a7The developer defines relationships between objects\n\uf0a7GAE Datastore distributes data automatically\n\uf071Firestore\u2019s key promises\n\uf0a7Response time depends on result set size,\nnot the database size\n\uf0a7Queries are always fast\n\uf0a7Automatic data distribution\n\uf071Offered in two modes, Google recommends:\n\uf0a7\u201cUse Firestore in Datastore mode for new server projects.\u201d\n \uf0a7\u201cUse Firestore in Native mode for new mobile and web apps.\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nComparison of Firestore Modes\n21\nhttps://cloud.goog\nle.com/datastore/d\nocs/firestore-or-\ndatastore\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native - Essentials\n22\n\uf071Organized as Collections of schemaless Documents where each Document can \nhave Collections\n\uf071Strongly consistent access model\n\uf071Comprehensive shallow reads\n\uf0e0one complete document without sub-collections\n\uf071Realtime and offline capabilities\n(in particular for mobile use cases)\nBlog Entry Collection\nBE1\nBE2\nBE3\nComments Collection\nC1\nC2\nC3\nC4\nComments Collection\nCA\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native - Documents\n23\n\uf071Documents represent data as Maps or POJOs\n\uf071By and large primitive types and Strings\n\uf071Denormalized Data Expected\n\uf071Document Limits\n\uf0a71 MB in size\n\uf0a740 thousand indexed fields\n\uf0a71 write per second sustained write rate\n\uf071Billing per document access\n\uf071Rule of thumb: One document per controller\nBE1\ntitle : \"a\"\nauthor : \n\"andreas\"\nBlog Entry Collection\nBE2\ntitle : \"b\"\nauthor : \n\"andreas\"\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native \u2013 CRUD I\n24\n\uf071Getting hold of a firestore reference\nFirestoreOptions firestoreOptions =\nFirestoreOptions.getDefaultInstance().toBuilder()\n.setProjectId(projectId)\n.setCredentials(GoogleCredentials.getApplicationDefault())\n.build();\nFirestore db = firestoreOptions.getService();\n\uf071Create\nDocumentReference docRef = db.collection(\"blogentries\").document(\"firestore\");\nDocumentReference docRef = db.collection(\"blogentries\").document(\"firestore\").collection(\"comments\")\u2026\n\uf0e0implicitly creates collection / document reference if not existent\nMap<String, Object> data = new HashMap<>();\ndata.put(\"title\", \"Firestore\");\ndata.put(\"meta\", \"concept, data modeling\");\nApiFuture<WriteResult> result = docRef.set(data);\n\uf0e0replaces existing data\n\uf0e0yields an ApiFuture; there is some work to be done behind the scenes\n\uf0e0adding a POJO is possible as well\nFS\nQuickstart Snippets: https://github.com/googleapis/java-firestore/tree/main/samples/snippets\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native \u2013 CRUD II\n25\n\uf071Update\ndocRef.update(\"title\", \"Firestore Native\");\nOR\nMap<String, Object> data = new HashMap<>();\ndata.put(\"title\", \"Firestore\");\ndocRef.update(data)\n\uf071Read\nApiFuture<QuerySnapshot> query = db.collection(\"blogentries\").get();\nQuerySnapshot querySnapshot = query.get(); // essentially two gets\nList<QueryDocumentSnapshot> docs = querySnapshot.getDocuments(); // then iterate\nSystem.out.println(document.getData().get(\"title\"));\n//Similarly\ndb.collection(\"blogentries\").document(\"firestore\").listCollections();\n\uf071Delete\nApiFuture<WriteResult> res = db.collection(\"blogentries\").document(\"firestore\").delete();\n \uf0e0note: sub-collections need to be deleted manually!\n OR\nMap<String, Object> upd = new HashMap<>();\nupd.put(\"meta\", FieldValue.delete());\n ApiFuture<WriteResult> res = docRef.update(upd);\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native \u2013 Indices and Queries\n26\n\uf071Firestore writes an index on every field\n(also for nested fields)\n\uf071Basic query concept\n\uf0a7Find starting point in index\n\uf0a7Gather adjacent documents in one go!\n\uf071Queries designed to be fast irrespective of data set size\n\uf0a7One inequality filter max.\n \uf0a7No Joins and No subquery filtering\n\uf071No partial fetches of documents\ndocumentid\nauthor\nfirestore\nandreas\nappengine\nandreas\nlambda\njohannes \ndocumentid\nrating\nlambda\n5\nfirestore\n4\nappengine\n4\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native \u2013 Query Example\n27\n\uf071Simple Query\nCollectionReference entries = db.collection(\"blogentries\");\nQuery query = entries.whereEqualTo(\"title\", \"firestore\");\n// get query results\nApiFuture<QuerySnapshot> querySnapshot = query.get();\n// then iterate\nfor (DocumentSnapshot document : querySnapshot.get().getDocuments()) { .. }\n\uf071Compound Query\nQuery compQ = entries.whereEqualTo(\"author\", \"andreas\").whereGreaterThan(\"rating\", 5);\n \uf0e0Note: One range filter max. per compound query\n\uf071Collection Group Query\nQuery jComs = db.collectionGroup(\"comments\").whereEqualTo(\"author\", \"johannes\");\n ApiFuture< QuerySnapshot> querySnapshot = jComs.get();\nfor (DocumentSnapshot document : querySnapshot.get().getDocuments()) {\u2026}\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native - Transactions\n28\n\uf071Firestore offers two \u201esorts\u201c of transactions\n\uf0a7read and write operations on one or more documents\n\uf0e0called transactions in Google documentation\nApiFuture<Void> ftTx = db.runTransaction(transaction -> {\nMap map = transaction.get(docRef).getData();\nrating = map.getDouble(\"rating\");\ntransaction.update(docRef, \"rating\", rating * 1.1);\nreturn null;\n});\n\uf0a7set of write operations on one or more documents\n\uf0e0called batched write in Google documentation\nWriteBatch batch = db.batch();\nbatch.set(..); batch.update(..); batch.delete(..)\n ApiFuture<List<WriteResult>> future = batch.commit();\n\uf071Liabilities\n\uf0a7Read operations must come before write operations\n\uf0a7Maximum of 500 affected documents\nhttps://cloud.goog\nle.com/firestore/do\ncs/manage-\ndata/transactions\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFire Store in Datastore Mode\n29\n\uf071Before Firestore, Google offered Datastore\n\uf071Firestore now sold as Datastore successor with\n\uf0e0Firestore in Datastore Mode\n\uf071Automatic distribution across storage nodes\n\uf0a7The developer sets up parent-child relationships\n\uf0a7GAE Datastore distributes trees automatically\nStorage Node\nStorage Node\nStorage Node\n\u2026\nE4\nE3\nE1\nE9\nE8\nE7\nE2\nEc\nEa\nEb\nE6\nE5\nDS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore-Datastore Entities\n30\nGAE Datastore Entity ! = POJO Entity\nKey blogKey = datastore.newKeyFactory()\n.setKind(\"Blogentry\")\n.newKey(\"firestore\");\nEntity blogEntry = Entity.newBuilder(blogKey)\n.set(\"title\", \"Firestore in datastore mode\")\n.set(\"author\", \"andreas\")\n.build();\ndatastore.put(blogEntry) // replaces existing entry if need be\ndatastore.add(blogEntry) // requires entry to be new\nDatastore.update(blogEntry) // updates a previously retrieved / modified entry\nA Datastore Entity exists of\n\uf0a7Its Kind\n\uf0a7Properties\n\uf0a7Key\nFundamental \ndifference to JPA \nentities\nDS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDatastore Entity Keys\n31\n\uf071An Entity Key is defined by\n\uf0a7the entity\u2019s kind (say \u201cBlogentry\u201d)\n\uf0a7an identifier\n.newKey(\"firestore\");\n\uf0a7An optional ancestor path consisting of Kind-ID pairs\n(locates the entity within the Datastore hierarchy)\n\uf0e0could be Entry:E1/Comment:E2/Reply:E3\n\uf071The Datastore entity hierarchy relies on keys\n\uf0a7Entities without ancestors are root entities (tree roots)\n\uf0a7All entities with the same root entity as ancestor make up an entity group (tree)\nE3\nE1\nE2\nDS\nAnd a namespace\nif need be\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDatastore Entity Properties\n32\n\uf071Set of data types restricted since firestore introduction\n\uf0a7Mostly primitive / text types\n\uf0a71 MB limitation\n\uf071Remember that GAE Datastore is schemaless!\n Admissible\nProperty Types:\nhttps://cloud.goog\nle.com/datastore/d\nocs/concepts/entit\nies#properties_an\nd_value_types\n This code is fully\nacceptable\nDS\nEntity blogEntry = Entity.newBuilder(blogKey)\n.set(\"title\", \"Firestore in datastore mode\")\n.set(\"rating\", 3)\n.build();\nEntity blogEntry2 = Entity.newBuilder(blogKey2)\n.set(\"title\", \"Firestore in native mode\")\n.set(\"rating\", \"GREAT\")\n.build();\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nKind:Employee\nIdentifier:42\nAncestorPath:\"Employee:a\nsalieri\"\nname= Kraus\nfirstname= Murphy\nskill= [C#;C++;Python]\nfriends= [84;jGar]\nSample Datastore Entities Visualized\n33\nDS\nKind:Employee\nIdentifiier:asalieri\nAncestorPath: \"\"\nname= Antonio Salieri\nage= 22\nskill= Java\nKind:Employee\nIdentifier:jGar\nAncestorPath: \"\"\nname= Garage\nfirstname= Joe\nfriends=[] \nKind:Employee\nIdentifier:84\nAncestorPath: \"\"\nname= Little\nfirstname= John \nKind:Office\nIdentifier:104\nAncestorPath:\"Employee:a\nsalieri/Employee:42\"\nloc= Erlangen\nbuilding= BigB\nroom=5054\nparent-child\nkey-property\nBased on a \nGoogle example\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhat is the key?\n Kind:Employee\nIdentifier:42\nAncestorPath:\"Employee:a\nsalieri\"\nname= Kraus\nfirstname= Murphy\nskill= [C#;C++;Python]\nfriends= [84;jGar]\nSample Datastore Entities Visualized\n34\nDS\nKind:Employee\nIdentifiier:asalieri\nAncestorPath: \"\"\nname= Antonio Salieri\nage= 22\nskill= Java\nKind:Employee\nIdentifier:jGar\nAncestorPath: \"\"\nname= Garage\nfirstname= Joe\nfriends=[] \nKind:Employee\nIdentifier:84\nAncestorPath: \"\"\nname= Little\nfirstname= John \nKind:Office\nIdentifier:104\nAncestorPath:\"Employee:a\nsalieri/Employee:42\"\nloc= Erlangen\nbuilding= BigB\nroom=5054\nparent-child\nkey-property\nnamespace\ncomponent of a \nkey left out here!\n Based on a \nGoogle example\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDifferent identifiers may have different types (String, long)\n Kind:Employee\nIdentifier:42\nAncestorPath:\"Employee:a\nsalieri\"\nname= Kraus\nfirstname= Murphy\nskill= [C#;C++;Python]\nfriends= [84;jGar]\nSample Datastore Entities Visualized\n35\nDS\nKind:Employee\nIdentifiier:asalieri\nAncestorPath: \"\"\nname= Antonio Salieri\nage= 22\nskill= Java\nKind:Employee\nIdentifier:jGar\nAncestorPath: \"\"\nname= Garage\nfirstname= Joe\nfriends=[] \nKind:Employee\nIdentifier:84\nAncestorPath: \"\"\nname= Little\nfirstname= John \nKind:Office\nIdentifier:104\nAncestorPath:\"Employee:a\nsalieri/Employee:42\"\nloc= Erlangen\nbuilding= BigB\nroom=5054\nparent-child\nkey-property\nBased on a \nGoogle example\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDifferent entities of the same kind may have different \nproperties!\n",
            "Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n29\n\nEnough theory for now!\nGet your hands dirty,\nbut how?\nSpring Intializr, Lombok \nSpring Web & Thymeleaf\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n30\n\nSpring Initializr \u2013 start.spring.io\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n31\n\nSpring Initializr\n\u2022\nWebsite to initialize your spring boot project by selecting the build tool, JVM language, \nSpring Boot version and metadata\n\u2022\nDependency section is used for specifying the starters to include in the project\n\u2022\n Later, we will use further spring boot starters, but for now to build a simple web \napplication, we use Spring Boot DevTools*, Spring Web, Lombok and Thymeleaf\n* DevTools monitor the classpath and restart when changes occur. In Eclipse this happens when saving a file, in IntellJ when building the project. Use SaveActions\nplugin in IntelliJ and compile files experimental option (does currently result in a lot of false positives \u2013 building more often then required).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n32\n\nOur domain model for a Movie store\n\u2022\nRelations between the classes result in further attributes\n\u2022\nWe will implement them later, when storing data in the database \uf04a\nActor\n-id: String\n-name: String\n-wonOscar: boolean\n-birthday: Date\nMovie\n-id: String\n-title: String\n-wonOscar: boolean\n-releaseYear: int\n-coverImage: String\nFilmStudio\n-id: String\n-name: String\n-since: Date\n1\n*\n*\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n33\n\nExcursion: Lombok for the lazy ones\n\u2022\nCompile time annotations to reduce boiler plate code\n\u2022\nSetters, getters, equals(), hashCode(), toString() etc. are generated at compile time\n\u2022\nOnly thing you need is to annotate your model classes with @Data\n\u2022\nSetup Lombok plugin for your IDE\n\u2022\nEnable annotation processing in IntelliJ: \nSettings > Build, Execution, Deployment > Compiler > Annotation Processors\n\u2022 @AllArgsConstructor\n\u2022 @RequiredArgsConstructor\n\u2022 @NoArgsConstructor\n\u2022 @Slf4j (getting a logger)\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Movie {\nprivate String id;\nprivate String title;\nprivate boolean wonOscar;\nprivate int releaseYear;\nprivate String coverImage;\nprivate List<Actor> actors;\n}\nOnly necessary annotation here to generate all \nnecessary methods.\n Other useful annotations are:\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n34\n\nSpring MVC \u2013 How does this work \u2013 GET request?\n"
        ],
        "prompt": "\n                You are an assistant for a university level course.\n\n                Use only the information from the context. If the answer is not present in the context, say \"I don't know.\" \n                Respond with one exam-style question, clearly phrased.\n\n                Example:\n                Context:\n                A distributed system is a collection of independent computers that appear to the user as a single system.\n\n                Question:\n                What is a distributed system?\n\n                ---\n\n                Now use the following context to generate a question.\n\n                Context:\n                Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\n\n\uf0e0Hey, that\u2019s Java EE! \u2026 \nthe Servlet part of it.\n Src: Java EE 8 Spec\nJava 11 with Non-Servlet\nEnvironments available now\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nSrc: Java EE 8 Spec\nGAE Java Runtime - Previously\n10\nGoogle documentation:\n\u201cApp Engine runs your Java \nweb application using a Java \n7 JVM in a safe \"sandboxed\" \nenvironment. App Engine \ninvokes your app's servlet \nclasses to handle requests \nand prepare responses in this \nenvironment.\u201d\n \uf0e0Hey, that\u2019s Java EE! \u2026 \nthe Servlet part of it.\n cf. course unit\nIV-A, slide 3\nSrc: google.com, 2015\nSrc: google.com, 2016\nSrc: google.com, 2017\nJava 8 beta available\nas of Dec. 2017\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nInitial GAE Servlet Focus\n11\n\uf071Reuse of defined programming contract (Servlet spec.)\n \uf0a7Well-known API classes (HttpServlet, Filter, HttpSession)\n \uf0a7Standard application layout (WAR, web.xml)\n \uf0a7Standard programming limitations\n(Actually no file system access)\n\uf071In theory, Servlet-based artifacts can be reused\n\uf0a7Existing web applications\n\uf0a7Existing Servlet-based technologies\n\uf0a7JSP\n\uf0a7JSF\n\uf0a7Existing web frameworks\n\uf0a7Wicket\n\uf0a7MyFaces\n\uf0a7\u2026\nhttps://jcp.or\ng/en/jsr/detail\n? id=340\nhttp://www.jc\np.org/en/jsr/d\netail?id=154\nThere used to \nbe a \u201cWill-it-\nplay\u201d web site, \nbut it has been \ntaken offline\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE Java Runtime - Now\n12\n\uf071Provide an executable jar with:\n\uf0a7includes main-class that starts a web server\n\uf0a7web-server needs to be exposed on PORT variable\n\uf0a7Includes an app.yaml as deployment descriptor\n\uf0e0Less assumptions about environment, basically Java 17/21\n\uf0e0Less frequent adaptations to environment changes\n\uf0e0Less constraints on deployment model\n\uf0e0More flexibility in choosing the framework you want\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE follows an industry trend:\nless Java EE / Jakarta EE, more Spring\n13\ncf. Chapter 3\nslide 14\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE Java Runtime = Servlet Container?\n14\n\uf071Traditionally (before GAE), servlet \ncontainers such as (an \nembedded) Jetty or Tomcat were \nhosted with (more or less) full \ncontrol over the environment:\n\uf0a7You code the servlets\n\uf0a7You still control a lot of the host\u2019s \nresources (file system, sockets etc.)\n \uf071With GAE, your access is more \nlimited \u2026\nbecause\n\uf0a7Sandbox approach\n\uf0a7Standard management procedures\n\uf0e0However: 2nd Gen. Relaxations\nServlet-\nContainer\nDatabase\nEJB-\nContainer\nApp-Server\nMachine\nSockets\nServlet-\nContainer\nDatabase\nEJB-\nContainer\nApp-Server\nMachine\nSockets\nrelax\nrelax\nClass whitelist \nabandoned since\nJava 8 environment\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE Java Runtime = Java Web Server Environment\n15\nIn essence, the GAE Java Runtime is a managed environment for Java-centric \nWeb Servers:\n \uf071The application is clustered by default\n\uf0e0multiple web servers serve your app\n\uf0a7No sticky sessions\n\uf0a7Single-Threaded servlets per default\n\uf071Modification of standard request/response headers\n\uf071Limitations on processing time and request/response data size\n\uf071GAE deployment descriptors\n\uf071Asynchronous request execution via cloud tasks\n\uf071Warmstart procedures (GET /_ah/warmup)\n \uf071Cloud ecosystem for service management (logging, routing etc.)\n\u201ccloudified\u201d,\nif you want\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nRequest Header Modifications\n16\n\uf071The following headers are removed from the request:\n\uf0a7Accept-Encoding\n\uf0a7Connection\n\uf0a7Keep-Alive\n\uf0a7Proxy-Authorization\n\uf0a7Trailer\n\uf0a7Transfer-Encoding\n\uf071App Engine adds some headers, e.g.\n\uf0a7X-AppEngine-Country\n\uf0a7X-AppEngine-Region\n\uf0a7X-AppEngine-City\n\uf0a7X-AppEngine-CityLatLong\nSimilar modifications\nfor response headers\nthat relate to the interaction\nbetween client and server.\n See\nhttps://cloud.google.com/a\nppengine/docs/standard/ref\nerence/request-headers\nhttps://cloud.google.com/a\nppengine/docs/standard/ho\nw-requests-are-handled\nThis is COOL, but puts\nportability at risk!\n \uf0e0Is striving for portability\na resonable goal when\ncoding for GAE?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nServICE Scaling Options\n17\nScaling options to tailor scaling behavior\nNote: Goal should be to respond in milliseconds\n\uf0e0Be prepared for DeadlineExceededException\nhttps://cloud.google.com/a\nppengine/docs/standard/ja\nva11/how-instances-are-\nmanaged#scaling_types\nManual Scaling\nBasic Scaling\nAutomatic Scaling\nFeature\nSpecific number of \ninstances\nMinimum Cost\n(rather backend)\nMinimum Latency\n(rather frontend)\n Goal\nFixed number of \ninstances\nPer request instantiation\nPreemptive instantiation \nbased on KPIs, e.g.,\nrequest rate and \nlatencies\nScaling concept\nSame as basic\n24 hours\n(prev. 60 minutes)\n10 minutes\n(env. dependencies;\nprev. 60 seconds)\nMaximum Request \nTimeout\nYes\nYes\nNo\nBackground threads\nSame as basic\nPer instance, version and \nservice\nInstances are \nanonymous\nInstance addressability\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGAE Application Logging\n18\n\uf071Standard request log:\nAutomatically collected log of the app requests, acessible via Google\u2018s Cloud \nLogging\n\uf071Application-specific log\n\uf0a7Just use java.util.logging or Logback/SLF4J\n\uf0a7Use the typical log levels \n\uf0a7You COULD write to stdout and stderr, but please use a logger\n\uf071Note:\nGoogle offers Debugging and Profiling for the Cloud, but logs sometimes are the \nmain source for chasing misbehaving applications\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nFirestore\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGoogle Firestore\n20\nRemember that\nthe \u201ccloud\u201d uses \nlots of \nstandardized \nmachines to serve \nyour app \u2026 and \nyou take care that \nyour app is \ndistributable!\n Remember that\nGoogle Cloud\nStorage and Cloud\nSQL are available\nas alternatives!\n TS\n\uf071Firestore is a schemaless object/document store\n\uf071Automatic distribution across storage nodes\n\uf0a7The developer defines relationships between objects\n\uf0a7GAE Datastore distributes data automatically\n\uf071Firestore\u2019s key promises\n\uf0a7Response time depends on result set size,\nnot the database size\n\uf0a7Queries are always fast\n\uf0a7Automatic data distribution\n\uf071Offered in two modes, Google recommends:\n\uf0a7\u201cUse Firestore in Datastore mode for new server projects.\u201d\n \uf0a7\u201cUse Firestore in Native mode for new mobile and web apps.\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nComparison of Firestore Modes\n21\nhttps://cloud.goog\nle.com/datastore/d\nocs/firestore-or-\ndatastore\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native - Essentials\n22\n\uf071Organized as Collections of schemaless Documents where each Document can \nhave Collections\n\uf071Strongly consistent access model\n\uf071Comprehensive shallow reads\n\uf0e0one complete document without sub-collections\n\uf071Realtime and offline capabilities\n(in particular for mobile use cases)\nBlog Entry Collection\nBE1\nBE2\nBE3\nComments Collection\nC1\nC2\nC3\nC4\nComments Collection\nCA\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native - Documents\n23\n\uf071Documents represent data as Maps or POJOs\n\uf071By and large primitive types and Strings\n\uf071Denormalized Data Expected\n\uf071Document Limits\n\uf0a71 MB in size\n\uf0a740 thousand indexed fields\n\uf0a71 write per second sustained write rate\n\uf071Billing per document access\n\uf071Rule of thumb: One document per controller\nBE1\ntitle : \"a\"\nauthor : \n\"andreas\"\nBlog Entry Collection\nBE2\ntitle : \"b\"\nauthor : \n\"andreas\"\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native \u2013 CRUD I\n24\n\uf071Getting hold of a firestore reference\nFirestoreOptions firestoreOptions =\nFirestoreOptions.getDefaultInstance().toBuilder()\n.setProjectId(projectId)\n.setCredentials(GoogleCredentials.getApplicationDefault())\n.build();\nFirestore db = firestoreOptions.getService();\n\uf071Create\nDocumentReference docRef = db.collection(\"blogentries\").document(\"firestore\");\nDocumentReference docRef = db.collection(\"blogentries\").document(\"firestore\").collection(\"comments\")\u2026\n\uf0e0implicitly creates collection / document reference if not existent\nMap<String, Object> data = new HashMap<>();\ndata.put(\"title\", \"Firestore\");\ndata.put(\"meta\", \"concept, data modeling\");\nApiFuture<WriteResult> result = docRef.set(data);\n\uf0e0replaces existing data\n\uf0e0yields an ApiFuture; there is some work to be done behind the scenes\n\uf0e0adding a POJO is possible as well\nFS\nQuickstart Snippets: https://github.com/googleapis/java-firestore/tree/main/samples/snippets\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native \u2013 CRUD II\n25\n\uf071Update\ndocRef.update(\"title\", \"Firestore Native\");\nOR\nMap<String, Object> data = new HashMap<>();\ndata.put(\"title\", \"Firestore\");\ndocRef.update(data)\n\uf071Read\nApiFuture<QuerySnapshot> query = db.collection(\"blogentries\").get();\nQuerySnapshot querySnapshot = query.get(); // essentially two gets\nList<QueryDocumentSnapshot> docs = querySnapshot.getDocuments(); // then iterate\nSystem.out.println(document.getData().get(\"title\"));\n//Similarly\ndb.collection(\"blogentries\").document(\"firestore\").listCollections();\n\uf071Delete\nApiFuture<WriteResult> res = db.collection(\"blogentries\").document(\"firestore\").delete();\n \uf0e0note: sub-collections need to be deleted manually!\n OR\nMap<String, Object> upd = new HashMap<>();\nupd.put(\"meta\", FieldValue.delete());\n ApiFuture<WriteResult> res = docRef.update(upd);\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native \u2013 Indices and Queries\n26\n\uf071Firestore writes an index on every field\n(also for nested fields)\n\uf071Basic query concept\n\uf0a7Find starting point in index\n\uf0a7Gather adjacent documents in one go!\n\uf071Queries designed to be fast irrespective of data set size\n\uf0a7One inequality filter max.\n \uf0a7No Joins and No subquery filtering\n\uf071No partial fetches of documents\ndocumentid\nauthor\nfirestore\nandreas\nappengine\nandreas\nlambda\njohannes \ndocumentid\nrating\nlambda\n5\nfirestore\n4\nappengine\n4\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native \u2013 Query Example\n27\n\uf071Simple Query\nCollectionReference entries = db.collection(\"blogentries\");\nQuery query = entries.whereEqualTo(\"title\", \"firestore\");\n// get query results\nApiFuture<QuerySnapshot> querySnapshot = query.get();\n// then iterate\nfor (DocumentSnapshot document : querySnapshot.get().getDocuments()) { .. }\n\uf071Compound Query\nQuery compQ = entries.whereEqualTo(\"author\", \"andreas\").whereGreaterThan(\"rating\", 5);\n \uf0e0Note: One range filter max. per compound query\n\uf071Collection Group Query\nQuery jComs = db.collectionGroup(\"comments\").whereEqualTo(\"author\", \"johannes\");\n ApiFuture< QuerySnapshot> querySnapshot = jComs.get();\nfor (DocumentSnapshot document : querySnapshot.get().getDocuments()) {\u2026}\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore Native - Transactions\n28\n\uf071Firestore offers two \u201esorts\u201c of transactions\n\uf0a7read and write operations on one or more documents\n\uf0e0called transactions in Google documentation\nApiFuture<Void> ftTx = db.runTransaction(transaction -> {\nMap map = transaction.get(docRef).getData();\nrating = map.getDouble(\"rating\");\ntransaction.update(docRef, \"rating\", rating * 1.1);\nreturn null;\n});\n\uf0a7set of write operations on one or more documents\n\uf0e0called batched write in Google documentation\nWriteBatch batch = db.batch();\nbatch.set(..); batch.update(..); batch.delete(..)\n ApiFuture<List<WriteResult>> future = batch.commit();\n\uf071Liabilities\n\uf0a7Read operations must come before write operations\n\uf0a7Maximum of 500 affected documents\nhttps://cloud.goog\nle.com/firestore/do\ncs/manage-\ndata/transactions\nFS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFire Store in Datastore Mode\n29\n\uf071Before Firestore, Google offered Datastore\n\uf071Firestore now sold as Datastore successor with\n\uf0e0Firestore in Datastore Mode\n\uf071Automatic distribution across storage nodes\n\uf0a7The developer sets up parent-child relationships\n\uf0a7GAE Datastore distributes trees automatically\nStorage Node\nStorage Node\nStorage Node\n\u2026\nE4\nE3\nE1\nE9\nE8\nE7\nE2\nEc\nEa\nEb\nE6\nE5\nDS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFirestore-Datastore Entities\n30\nGAE Datastore Entity ! = POJO Entity\nKey blogKey = datastore.newKeyFactory()\n.setKind(\"Blogentry\")\n.newKey(\"firestore\");\nEntity blogEntry = Entity.newBuilder(blogKey)\n.set(\"title\", \"Firestore in datastore mode\")\n.set(\"author\", \"andreas\")\n.build();\ndatastore.put(blogEntry) // replaces existing entry if need be\ndatastore.add(blogEntry) // requires entry to be new\nDatastore.update(blogEntry) // updates a previously retrieved / modified entry\nA Datastore Entity exists of\n\uf0a7Its Kind\n\uf0a7Properties\n\uf0a7Key\nFundamental \ndifference to JPA \nentities\nDS\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDatastore Entity Keys\n31\n\uf071An Entity Key is defined by\n\uf0a7the entity\u2019s kind (say \u201cBlogentry\u201d)\n\uf0a7an identifier\n.newKey(\"firestore\");\n\uf0a7An optional ancestor path consisting of Kind-ID pairs\n(locates the entity within the Datastore hierarchy)\n\uf0e0could be Entry:E1/Comment:E2/Reply:E3\n\uf071The Datastore entity hierarchy relies on keys\n\uf0a7Entities without ancestors are root entities (tree roots)\n\uf0a7All entities with the same root entity as ancestor make up an entity group (tree)\nE3\nE1\nE2\nDS\nAnd a namespace\nif need be\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDatastore Entity Properties\n32\n\uf071Set of data types restricted since firestore introduction\n\uf0a7Mostly primitive / text types\n\uf0a71 MB limitation\n\uf071Remember that GAE Datastore is schemaless!\n Admissible\nProperty Types:\nhttps://cloud.goog\nle.com/datastore/d\nocs/concepts/entit\nies#properties_an\nd_value_types\n This code is fully\nacceptable\nDS\nEntity blogEntry = Entity.newBuilder(blogKey)\n.set(\"title\", \"Firestore in datastore mode\")\n.set(\"rating\", 3)\n.build();\nEntity blogEntry2 = Entity.newBuilder(blogKey2)\n.set(\"title\", \"Firestore in native mode\")\n.set(\"rating\", \"GREAT\")\n.build();\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nKind:Employee\nIdentifier:42\nAncestorPath:\"Employee:a\nsalieri\"\nname= Kraus\nfirstname= Murphy\nskill= [C#;C++;Python]\nfriends= [84;jGar]\nSample Datastore Entities Visualized\n33\nDS\nKind:Employee\nIdentifiier:asalieri\nAncestorPath: \"\"\nname= Antonio Salieri\nage= 22\nskill= Java\nKind:Employee\nIdentifier:jGar\nAncestorPath: \"\"\nname= Garage\nfirstname= Joe\nfriends=[] \nKind:Employee\nIdentifier:84\nAncestorPath: \"\"\nname= Little\nfirstname= John \nKind:Office\nIdentifier:104\nAncestorPath:\"Employee:a\nsalieri/Employee:42\"\nloc= Erlangen\nbuilding= BigB\nroom=5054\nparent-child\nkey-property\nBased on a \nGoogle example\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhat is the key?\n Kind:Employee\nIdentifier:42\nAncestorPath:\"Employee:a\nsalieri\"\nname= Kraus\nfirstname= Murphy\nskill= [C#;C++;Python]\nfriends= [84;jGar]\nSample Datastore Entities Visualized\n34\nDS\nKind:Employee\nIdentifiier:asalieri\nAncestorPath: \"\"\nname= Antonio Salieri\nage= 22\nskill= Java\nKind:Employee\nIdentifier:jGar\nAncestorPath: \"\"\nname= Garage\nfirstname= Joe\nfriends=[] \nKind:Employee\nIdentifier:84\nAncestorPath: \"\"\nname= Little\nfirstname= John \nKind:Office\nIdentifier:104\nAncestorPath:\"Employee:a\nsalieri/Employee:42\"\nloc= Erlangen\nbuilding= BigB\nroom=5054\nparent-child\nkey-property\nnamespace\ncomponent of a \nkey left out here!\n Based on a \nGoogle example\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDifferent identifiers may have different types (String, long)\n Kind:Employee\nIdentifier:42\nAncestorPath:\"Employee:a\nsalieri\"\nname= Kraus\nfirstname= Murphy\nskill= [C#;C++;Python]\nfriends= [84;jGar]\nSample Datastore Entities Visualized\n35\nDS\nKind:Employee\nIdentifiier:asalieri\nAncestorPath: \"\"\nname= Antonio Salieri\nage= 22\nskill= Java\nKind:Employee\nIdentifier:jGar\nAncestorPath: \"\"\nname= Garage\nfirstname= Joe\nfriends=[] \nKind:Employee\nIdentifier:84\nAncestorPath: \"\"\nname= Little\nfirstname= John \nKind:Office\nIdentifier:104\nAncestorPath:\"Employee:a\nsalieri/Employee:42\"\nloc= Erlangen\nbuilding= BigB\nroom=5054\nparent-child\nkey-property\nBased on a \nGoogle example\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDifferent entities of the same kind may have different \nproperties!\n\n\nSrc: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n29\n\nEnough theory for now!\nGet your hands dirty,\nbut how?\nSpring Intializr, Lombok \nSpring Web & Thymeleaf\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n30\n\nSpring Initializr \u2013 start.spring.io\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n31\n\nSpring Initializr\n\u2022\nWebsite to initialize your spring boot project by selecting the build tool, JVM language, \nSpring Boot version and metadata\n\u2022\nDependency section is used for specifying the starters to include in the project\n\u2022\n Later, we will use further spring boot starters, but for now to build a simple web \napplication, we use Spring Boot DevTools*, Spring Web, Lombok and Thymeleaf\n* DevTools monitor the classpath and restart when changes occur. In Eclipse this happens when saving a file, in IntellJ when building the project. Use SaveActions\nplugin in IntelliJ and compile files experimental option (does currently result in a lot of false positives \u2013 building more often then required).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n32\n\nOur domain model for a Movie store\n\u2022\nRelations between the classes result in further attributes\n\u2022\nWe will implement them later, when storing data in the database \uf04a\nActor\n-id: String\n-name: String\n-wonOscar: boolean\n-birthday: Date\nMovie\n-id: String\n-title: String\n-wonOscar: boolean\n-releaseYear: int\n-coverImage: String\nFilmStudio\n-id: String\n-name: String\n-since: Date\n1\n*\n*\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n33\n\nExcursion: Lombok for the lazy ones\n\u2022\nCompile time annotations to reduce boiler plate code\n\u2022\nSetters, getters, equals(), hashCode(), toString() etc. are generated at compile time\n\u2022\nOnly thing you need is to annotate your model classes with @Data\n\u2022\nSetup Lombok plugin for your IDE\n\u2022\nEnable annotation processing in IntelliJ: \nSettings > Build, Execution, Deployment > Compiler > Annotation Processors\n\u2022 @AllArgsConstructor\n\u2022 @RequiredArgsConstructor\n\u2022 @NoArgsConstructor\n\u2022 @Slf4j (getting a logger)\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Movie {\nprivate String id;\nprivate String title;\nprivate boolean wonOscar;\nprivate int releaseYear;\nprivate String coverImage;\nprivate List<Actor> actors;\n}\nOnly necessary annotation here to generate all \nnecessary methods.\n Other useful annotations are:\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n34\n\nSpring MVC \u2013 How does this work \u2013 GET request?\n\n\n                Question:\n            ",
        "generated_answer": "What is the definition of a collection of independent computers that appear to the user as a single system?",
        "timestamp": "2025-05-21T18:48:23",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13",
            "Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13 Each Lambda Function needs a IAM  \nRole for accessing other services\n05-07 The code artifact is located within the\nsame region in a S3 bucket\n09-10 The two basic configuration \nparameters on most platforms \n11\nEntry for the FaaS Platform \n(comparable with main-method)\n12\nSelected your source code\u2019s runtime\n14-16 Configuration via environment \nvariables. Also visible in the web UI\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     +     +     +   Setup via CloudFormation\n77\n\"LambdaPermissionAllItemsFunction\": {\n\"Type\": \"AWS::Lambda::Permission\", \u2026\n},\n\"LambdaPermissionStoreOrderFunction\": {\n\"Type\": \"AWS::Lambda::Permission\", \u2026\n},\n\"ItemGet\": {\n\"DependsOn\":",
            "FaaS is a cloud service model, where a provider\n\u2022 provides a managed execution environment\n\u2022 abstracts (nearly) all operational tasks (gain of control)\n\u2022 facilitates auto-scaling of short-lived, context-unaware cloud \nfunctions\n\u2022 facilitates scaling to zero (no idle running functions, unique for FaaS)\n\u2022 enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\u2022 FaaS is a cloud service model, where a user\n\u2022 writes single-threaded, performant, stateless cloud functions\n\u2022 specifies only a few configuration parameters (e.g. RAM, timeout)\n38\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\nFunction as a Service (FaaS) [Eyk2017]\n\n\u2022 Example: Photo upload in a S3 bucket, event processing:\n\u2022 Resize to standardized dimensions, convert to JPG (quality 90%), store \nprocessed images in a new bucket, keeping the original\n\u2022 Functions are executed\nin lightweight containers\n\u2022 Cold starts sometimes a\nproblem for FaaS\n\u2022 Typical triggers\n\u2022\nHttp based triggers (e.g. API Gateway)\n\u2022\nCRON triggers (e.g. Cloud Watch)\n\u2022\nQueuing/ Notification triggers (e.g. SNS, SQS)\n\u2022\nDatabase triggers (e.g. DynamoDb, S3)\n39\nSrc: \nhttps://www.youtube.com/watch?v=eOBq__h4OJ4\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\nFaaS: Cloud Function Execution\n\nSolving especially under-/overprovisioning problem\n\u2022 Bursty Workloads\n\u2022 Periodic Workloads \n40\nYou can do this \nwith IaaS as \nwell.\n FaaS makes it \nharder to get it \nwrong ;-)\n Introduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\nFaaS: Powerful Use Cases\n\n\u2022 Container as a Service (CaaS) service model\n\u2022 Containers are a lightweight alternative to traditional \nvirtualization\n\u2022 Run many applications in a fast, portable and isolated way in \nmany different environments!\n \u2022 Containerization in Linux is not a new concept, but employing\nit used to be rather cumbersome\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n43\n(Not so Recent) Cloud Computing Trends\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n44\nHardware\nOperating System\nHypervisor\nVirtual Machine\nOperating \nSystem\nBins / libs\nApp\nApp\nVirtual Machine\nOperating \nSystem\nBins / libs\nApp\nApp\nHardware\nHypervisor\nVirtual Machine\nOperating \nSystem\nBins / libs\nApp\nApp\nVirtual Machine\nOperating \nSystem\nBins / libs\nApp\nApp\nHardware\nOperating System\nContainer\nBins / libs\nApp\nApp\nContainer\nBins / libs\nApp\nApp\nType 1 Hypervisor\nType 2 Hypervisor\nLinux Containers\nContainers share the OS kernel of the host and thus are lightweight.\n However, each container must have the same OS kernel.\n Containers are isolated, \nbut share OS and, where \nappropriate, libs / bins.\n Src.:Boden Russell,\nIBM\nHypervisors vs. Linux Containers\n\n\u2022 Provision in seconds / milliseconds\n\u2022 Near bare metal runtime performance\n\u2022 VM-like agility \u2013 it\u2019s still \u201cvirtualization\u201d\n\u2022 Flexibility\n\u2022 Containerize a \u201csystem\u201d\n\u2022 Containerize \u201capplication(s)\u201d\n\u2022 Lightweight\n\u2022 Just enough Operating System\n\u2022 Minimal per container penalty\n\u2022 Open source \u2013 free \u2013 lower TCO\n\u2022 Supported with OOTB modern Linux kernel\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n45\nManual\nVM\nLXC\nProvision Time\nDays\nMinutes\nSeconds / ms\nWhy Linux Containers\nSrc.:Boden Russell,\nIBM\n\n\u2022 In 2013 Docker was released, which made container \ntechnology very accessible\n\u2022 What Docker does:\n\u2022 \u201cDocker allows you to package an application with all of its \ndependencies into a standardized unit for software development.\u201d \uf0e0\nDocker image\n\u2022 \u201cDocker containers wrap up a piece of software in a complete \nfilesystem that contains everything it needs to run.\n \u2022 This guarantees that it will (almost) always run the same, regardless \nof the environment it is running in.\u201d\n Introduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n46\nImage src: https://commons.wikimedia.org/wiki/File:Docker_(container_engine)_logo.svg\nKey promise: Build, ship and run everywhere! \n Docker\n\n\u2022 Problem with running productive Docker \napplications\n\u2022 Best practice: One service per image/container\n\u2022 Applications typically consist of multiple, isolated \nservice units\n\u2022 Manual orchestration (starting, linking, monitoring) of \ncontainers is a hassle\n\uf0e0use Docker compose\n\uf0e0Use Kubernetes\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n47\nSrc: \nhttp://anandmanisankar.\ncom/posts/docker-\ncontainer-nginx-node-\nredis-example/\nSetting up a Containerized System\n\n\u2022 Kubernetes (K8s) is an open-source system for automating \ndeployment, scaling, and management of containerized \napplications\n\u2022 Declarative configuration\n\u2022 Comparison of desired state with observed state\n\u2022 Self-healing\n\u2022 Multiple physical or virtual machines Nodes are joined to a \nKubernetes Cluster which is controlled by a Master\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n48\nKubernetes\n\n49\nKubernetes \u2013 Core Concepts\nkubele\nt\nKubernetes Cluster\nD\nA\nLabel\napp=\nA\napp=\nA\ns:app=A\nLabel \nSelector\nAdapted from https://kubernetes.io/docs/tutorials/kubernetes-basics/\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n\u2022 A pod contains \ncontainers + \nvolumes (= app \ninstance)\n\u2022 A kubelet\ncontrols pods \non a node (= a \nmachine)\n\u2022 A master\ncontrols a \ncluster\n\u2022 Services a \nrealized by \nmultiple pods \nand identified \nby labels\n\n\u2022 Two basic ways of software deployment with containers in the \ncloud\n\u2022 Using Kubernetes Clusters\n\u2022 More control, cluster management and container\n\u2022 Clouds provide Kubernetes clusters as a service\n\u2022 Deployment configuration must be provided by the customer\n\uf0e0Effort for realizing sensible load balancing, scaling\u2026\n\u2022 Using Docker Container Services\n\u2022 Control of containers, but not cluster management\n\u2022 Essentially, managing containers with more vendor-defined settings\n\u2022 Do not confuse with PaaS: Some CSPs allow Docker \ncontainers to be deployed to extend their PaaS products\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n50\ne.g. AWS EKS\nElastic Kubernetes Service\ne.g. AWS ECS\nElastic Container \nService\nContainers in the Cloud\n\nOption 1: Using Kubernetes Clusters\n\u2022 Closer to IaaS\n\u2022 More control\n\u2022 Container\n\u2022 Cluster management\n\u2022 Kubernetes cluster is provided by the \ncloud\n\u2022 Deployment configuration must be \nprovided by the customer\n\u2022 Effort for configuring load balancing, \nscaling, networking, \u2026\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n51\nContainers in the Cloud\ne.g. AWS EKS\nElastic Kubernetes Service\n\nOption 2: Using Docker Containers\n\u2022 Less control\n\u2022 Just Containers\n\u2022 No cluster management\n\u2022 Upload of Docker images to the cloud\n\u2022 Configuration is done via user interface \nor API\n\u2022 E.g. set minimum, maximum number of \ncontainers, port forwarding\n\u2022 Load balancing, scaling and networking \nis handled by the service\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n52\nContainers in the Cloud\ne.g. AWS ECS\nElastic Container \nService\n\n\u2022 Docker and Kubernetes are field-tested technologies that can \nbe run on-premise for developing and staging purposes\n\u2022 Danger of vendor lock-in is somewhat mitigated by relying on \nopen source technologies. However, cloud applications will \nprobably still use cloud-specific services\n\u2022 Deploying applications with Kubernetes is not trivial\n\u2022 Some PaaS services also allow uploading a Docker container\n\u2022 Not CaaS in a strict sense because Docker is merely used to enable \nmore flexible runtime environments\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n 53\nCaaS Considerations\n\n\u2022 Provides backend cloud storage and standardized solutions to \ncommon tasks to developers of web and mobile apps\n\u2022 Features usually include\n\u2022 Authentication\n\u2022 Analytics\n\u2022 Push notifications\n\u2022 Storage\n\u2022 Hosting\n\u2022 Serverless Functions\n\u2022 AWS Amplify, Google Firebase\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n54\nBackend as a Service (BaaS)\n\n\u2026 as a Service - Summary\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n55\nUser Control\nProvider Control\nIaaS\nPaaS\nSaaS\nhigh\nlow\nhigh\nlow\nFaaS\nBaaS\nCaaS\n\nLet\u2019s talk about Cost\nApp with Beanstalk (PaaS), Lambda (FaaS), and \nDatabase (IaaS) in a VPC\nMySQL \ninstance\nPublic subnet (eu-west-\n1b)\n10.0.7.0/24 \nDB Subnet Group\nSecurity \ngroup\nPublic subnet (eu-west-\n1a)\n10.0.6.0/24 \nAmazon Elastic Beanstalk\nS3 Bucket\nfor images\nTrigger\ns\nVPC\nEC2 \nNode\nApplication \nLoad Balancer\nApplication\nContainer\nAmazon Route 53\nwww.bookshelf.elasticbeanstalk.com\nVPN\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n56\n\nhttps://calculator.aws/#/estimate?id=67533da036ab59ffad9abc8\n0a940a40f2a9d4a73\n1 VPN Connection to VPC for administrative tasks\n~432000 images processed per month (~ 100 KB / image)\nAll required quantities for cost calculation are rough estimates!\n-> Know the profile of your Application for each service of Cloud \nprovider (monitor and evaluate continuously!)\n Cost estimation\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n57\n\nAWS Pricing - Reserved Instances \u2013 EC2 IaaS\n\u2022 Regional\n\u2022 no reserved capacity\n\u2022 discount for any EC2 \ninstance of applicable\ninstance family (e.g. t2) \nand OS in any AZ\n\u2022 instance size flexibility\n\u2022 Limit: 20 per Region per \nmonth\n\u2022 Zonal\n\u2022 no AZ flexibility\n\u2022 no instance size flexibility\n\u2022 guaranteed capacity\n\u2022 Limit 20 per AZ per month\n\u2022 Size flexibility\n58\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\nNormalizatio\nn\nfactor\nInstance \nsize\n0.25\nnano\n0.5\nmicro\n1\nsmall\n2 (reserved)\nmedium\n4\nlarge\n8\nxlarge\nt2.medium = 2 t2.small\nt2.medium = 0.5 t2.large\n\n\u2022 On Demand (pay as you\ngo) \u2013 most expensive and \nmost flexible\n\u2022 Standard\n\u2022 Fixed instance family, but \nchangeable size\n\u2022 Sellable on Marketplace \n(bank with US address\nrequired)\n \u2022 Convertible\n\u2022 Change instance family\n\u2022 more expensive than\nStandard\n\u2022 Not sellable on \nMarketplace\n\u2022 EC2 Instance Saving Plans\n\u2022 Cost commitment per hour\n\u2022 Fixed instance family, but changeable\nsize\n\u2022 Compute Saving Plans\n\u2022 Cost commitment per hour\n\u2022 Flexibility: all instance families and \nsizes\n\u2022 Reserved Pricing\n\u2022 Duration: 1 year or 3 years\n\u2022 Payment:\n\u2022 All Upfront\n\u2022 Partial Upfront\n\u2022 No Upfront (pay every month)\n AWS Pricing \u2013 EC2 Offering Classes\n59\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n\n\u2022 t2.medium \u2013 eu-west-1 \u2013 1 year\nAWS Pricing \nhttps://github.com/concurrencylabs/aws-pricing-tools\nCalculated using AWS Price List API (2021-05-26) and Concurrency Labs' AWS Pricing Tools\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n60\n\nPricing \u2013 Compute (IaaS)\n\u2022 On Demand\n\u2022 Discount \u2013 1 year commitment\n61\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n\nPricing - FaaS\nDuration is \nRounded to the \nNearest\nCost of Each \nAdditional 1 GB-\nsecond\nCost of Each \nAdditional 1 \nMillion Request\ns\nFree Monthly \nRequests\nFree Monthly \nDuration (GB-\nseconds)\n Provider\n1ms\n$0.000016\n$0.20\n1 Million\n400,000\nAWS\n1ms\n$0.000016\n$0.20\n1 Million\n400,000\nAzure\n100ms\n$0.0000125\n$0.40\n2 Million\n400,000\nGCP\n62\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n\nPricing \u2013 CaaS (Kubernetes)\n\u2022\nOn Demand monthly cost\n\u2022\n1Year commitment monthly cost\n63\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\nAdapted from https://github.com/sidpalas/managed-kubernetes-pricing/\n\n1. What is the Cloud?\n2. Cloud Service Models\n3. Why move / move not into the Cloud?\n4. Software Development for the Cloud\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n64\nOutline\n\n\u2022 Cost/CPU hour, Cost/storage may be\nmore expensive in the cloud, but\u2026\n\u2022 Easy 'in', (easy 'out' ?),\n\u2022 Time to Market (TTO)\n\u2022 Consider Total Cost of Ownership (TCO)\n \u2022 Personnel, Skillset\n\u2022 Housing, electricity etc.\n \u2022 Elasticity (be able to handle peak loads), risk\n\u2022 New types of applications\n\u2022 Cloud Providers can leverage\neconomies of scale\n\u2022 Very large data centers 10s of\n1000s / 10000s\n\u2022 Reuse the same hardware for\ndifferent customers\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n66\nSource:\nMicrosoft Cloud Computing Whitepapers,\n\u201cThe Economics of the Cloud\u201d, 2010\nReasons to Move into the Cloud\n\n\u2022 Data center contract renewals\n\u2022 Acquisitions\n\u2022 Increased capacity requirements\n\u2022 e.g. rapid growth of userbase\n\u2022 Software and hardware refresh cycles\n\u2022 Security threats\n\u2022 Compliance needs\n\u2022 Product development benefits\n\u2022 End-of-life events\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n67\nSrc: https://cloud.google.com/blog/products/storage-data-transfer/8-common-reasons-why-enterprises-migrate-to-the-cloud\nTriggers to Move into the Cloud\n\n\u2022 Availability of Service\n\u2022 Data Lock-In\n\u2022 Data Confidentiality and Auditability\n\u2022 Data Transfer Bottlenecks\n\u2022 Performance Unpredictability\n\u2022 Scalable Storage\n\u2022 Bugs in Large-Scale Distributed Systems\n\u2022 Scaling Quickly\n\u2022 Reputation Fate Sharing\n\u2022 Software Licensing\n\u2022 Compounded pricing\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n68\nClaude Shannon,\ncreator of modern\ninformation theory;\nSecurity is a question\nof attacker\u2019s computing\npower, key safety and\ninformation leakage\nper message.\n The cloud changes\ntwo important factors\nnegatively:\n\u2022\nattacker power\n\u2022\nattacker incentive\nSrc: Michael Armbrust et al., \u201cAbove the Clouds: A Berkeley View of Cloud \nComputing\u201d, UCB Tech. Reports, 2009:\nReasons to Stay Off the Cloud\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n69\nWhy is Everybody so Keen on Choosing\none Single Cloud Provider?\n\n\u2022 Q4 2018\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n70\nSrc: https://www.srgresearch.com/articles/fourth-quarter-growth-cloud-services-\ntops-banner-year-cloud-providers\nCloud Provider Selection - I\n\n\u2022 Certifications & Standards\n\u2022 Technologies & Service Roadmap\n\u2022 Data Security, Data Governance and Business policies\n\u2022 Service Dependencies & Partnerships\n\u2022 Contracts, Commercials & SLAs\n\u2022 Reliability & Performance\n\u2022 Migration Support, Vendor Lock in & Exit Planning\n\u2022 Business health & Company profile\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n71\nSrc: https://www.cloudindustryforum.org/content/8-criteria-ensure-you-select-right-cloud-service-provider#sdep\nCloud Provider Selection - II\n\n\u2022 BSI: Anforderungskatalog Cloud Computing (C5)\n\u2022 Cloud Computing Compliance Controls Catalogue\n\u2022 Environmental parameters\n\u2022 System description\n\u2022 Jurisdiction and locations of data storage, processing and backup\n\u2022 Disclosure and investigatory powers\n\u2022 Certifications\n\u2022 ISO/IEC 27017: Guidelines specially for cloud computing, \ncomplementary to:\n\u2022 ISO/IEC 27001 and ISO/IEC 27002 information security standards\n\u2022 Big cloud providers usually have them all (also Alibaba)\n Introduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n72\nCloud Provider Selection - III\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n73\nExemplary Use Cases\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n74\nCloud-Only Services - I\nPraxis Dr. M\u00fcller\nPraxis Dr. Schmitt\nExample: \u201edigital \nService-Mgt.\u201c\n\u2022 List of bought \nproducts\n\u2022 Value-Added \nServices\n\u2022 Personal contact \ndata\n\u2022 Online inbox \nfunctionality\n\u2022 Maintenance \ninformation\nImage Src.\n Jason Taix, Pixabay\nStockSnap, Pixabay\nMichal Jarmoluk, Pixabay\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n75\nCloud-Only Services - II\nGCP Region EU-Central1\nnginx\nApplication Server\n(Linux on GCE)\n Load\nBalancer\n(Google)\nnginx\nApplication Server\n(Linux on GCE)\nnginx\nApplication Server\n(Linux on GCE)\n Disclaimer: There are a lot more technical options!\n NoSQL Store\nDr. M\u00fcller\nDr. Schmitt\nDentist Clarke\nDentist Osborne\nEssentially, you provide an account management application where \nyou may allow the dentist to manage devices / users himself.\n"
        ],
        "prompt": "\n                You are an assistant for a university level course.\n\n                Use only the information from the context. If the answer is not present in the context, say \"I don't know.\" \n                Respond with one exam-style question, clearly phrased.\n\n                Example:\n                Context:\n                A distributed system is a collection of independent computers that appear to the user as a single system.\n\n                Question:\n                What is a distributed system?\n\n                ---\n\n                Now use the following context to generate a question.\n\n                Context:\n                Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\n\nRemark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13 Each Lambda Function needs a IAM  \nRole for accessing other services\n05-07 The code artifact is located within the\nsame region in a S3 bucket\n09-10 The two basic configuration \nparameters on most platforms \n11\nEntry for the FaaS Platform \n(comparable with main-method)\n12\nSelected your source code\u2019s runtime\n14-16 Configuration via environment \nvariables. Also visible in the web UI\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     +     +     +   Setup via CloudFormation\n77\n\"LambdaPermissionAllItemsFunction\": {\n\"Type\": \"AWS::Lambda::Permission\", \u2026\n},\n\"LambdaPermissionStoreOrderFunction\": {\n\"Type\": \"AWS::Lambda::Permission\", \u2026\n},\n\"ItemGet\": {\n\"DependsOn\":\n\nFaaS is a cloud service model, where a provider\n\u2022 provides a managed execution environment\n\u2022 abstracts (nearly) all operational tasks (gain of control)\n\u2022 facilitates auto-scaling of short-lived, context-unaware cloud \nfunctions\n\u2022 facilitates scaling to zero (no idle running functions, unique for FaaS)\n\u2022 enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\u2022 FaaS is a cloud service model, where a user\n\u2022 writes single-threaded, performant, stateless cloud functions\n\u2022 specifies only a few configuration parameters (e.g. RAM, timeout)\n38\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\nFunction as a Service (FaaS) [Eyk2017]\n\n\u2022 Example: Photo upload in a S3 bucket, event processing:\n\u2022 Resize to standardized dimensions, convert to JPG (quality 90%), store \nprocessed images in a new bucket, keeping the original\n\u2022 Functions are executed\nin lightweight containers\n\u2022 Cold starts sometimes a\nproblem for FaaS\n\u2022 Typical triggers\n\u2022\nHttp based triggers (e.g. API Gateway)\n\u2022\nCRON triggers (e.g. Cloud Watch)\n\u2022\nQueuing/ Notification triggers (e.g. SNS, SQS)\n\u2022\nDatabase triggers (e.g. DynamoDb, S3)\n39\nSrc: \nhttps://www.youtube.com/watch?v=eOBq__h4OJ4\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\nFaaS: Cloud Function Execution\n\nSolving especially under-/overprovisioning problem\n\u2022 Bursty Workloads\n\u2022 Periodic Workloads \n40\nYou can do this \nwith IaaS as \nwell.\n FaaS makes it \nharder to get it \nwrong ;-)\n Introduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\nFaaS: Powerful Use Cases\n\n\u2022 Container as a Service (CaaS) service model\n\u2022 Containers are a lightweight alternative to traditional \nvirtualization\n\u2022 Run many applications in a fast, portable and isolated way in \nmany different environments!\n \u2022 Containerization in Linux is not a new concept, but employing\nit used to be rather cumbersome\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n43\n(Not so Recent) Cloud Computing Trends\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n44\nHardware\nOperating System\nHypervisor\nVirtual Machine\nOperating \nSystem\nBins / libs\nApp\nApp\nVirtual Machine\nOperating \nSystem\nBins / libs\nApp\nApp\nHardware\nHypervisor\nVirtual Machine\nOperating \nSystem\nBins / libs\nApp\nApp\nVirtual Machine\nOperating \nSystem\nBins / libs\nApp\nApp\nHardware\nOperating System\nContainer\nBins / libs\nApp\nApp\nContainer\nBins / libs\nApp\nApp\nType 1 Hypervisor\nType 2 Hypervisor\nLinux Containers\nContainers share the OS kernel of the host and thus are lightweight.\n However, each container must have the same OS kernel.\n Containers are isolated, \nbut share OS and, where \nappropriate, libs / bins.\n Src.:Boden Russell,\nIBM\nHypervisors vs. Linux Containers\n\n\u2022 Provision in seconds / milliseconds\n\u2022 Near bare metal runtime performance\n\u2022 VM-like agility \u2013 it\u2019s still \u201cvirtualization\u201d\n\u2022 Flexibility\n\u2022 Containerize a \u201csystem\u201d\n\u2022 Containerize \u201capplication(s)\u201d\n\u2022 Lightweight\n\u2022 Just enough Operating System\n\u2022 Minimal per container penalty\n\u2022 Open source \u2013 free \u2013 lower TCO\n\u2022 Supported with OOTB modern Linux kernel\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n45\nManual\nVM\nLXC\nProvision Time\nDays\nMinutes\nSeconds / ms\nWhy Linux Containers\nSrc.:Boden Russell,\nIBM\n\n\u2022 In 2013 Docker was released, which made container \ntechnology very accessible\n\u2022 What Docker does:\n\u2022 \u201cDocker allows you to package an application with all of its \ndependencies into a standardized unit for software development.\u201d \uf0e0\nDocker image\n\u2022 \u201cDocker containers wrap up a piece of software in a complete \nfilesystem that contains everything it needs to run.\n \u2022 This guarantees that it will (almost) always run the same, regardless \nof the environment it is running in.\u201d\n Introduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n46\nImage src: https://commons.wikimedia.org/wiki/File:Docker_(container_engine)_logo.svg\nKey promise: Build, ship and run everywhere! \n Docker\n\n\u2022 Problem with running productive Docker \napplications\n\u2022 Best practice: One service per image/container\n\u2022 Applications typically consist of multiple, isolated \nservice units\n\u2022 Manual orchestration (starting, linking, monitoring) of \ncontainers is a hassle\n\uf0e0use Docker compose\n\uf0e0Use Kubernetes\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n47\nSrc: \nhttp://anandmanisankar.\ncom/posts/docker-\ncontainer-nginx-node-\nredis-example/\nSetting up a Containerized System\n\n\u2022 Kubernetes (K8s) is an open-source system for automating \ndeployment, scaling, and management of containerized \napplications\n\u2022 Declarative configuration\n\u2022 Comparison of desired state with observed state\n\u2022 Self-healing\n\u2022 Multiple physical or virtual machines Nodes are joined to a \nKubernetes Cluster which is controlled by a Master\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n48\nKubernetes\n\n49\nKubernetes \u2013 Core Concepts\nkubele\nt\nKubernetes Cluster\nD\nA\nLabel\napp=\nA\napp=\nA\ns:app=A\nLabel \nSelector\nAdapted from https://kubernetes.io/docs/tutorials/kubernetes-basics/\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n\u2022 A pod contains \ncontainers + \nvolumes (= app \ninstance)\n\u2022 A kubelet\ncontrols pods \non a node (= a \nmachine)\n\u2022 A master\ncontrols a \ncluster\n\u2022 Services a \nrealized by \nmultiple pods \nand identified \nby labels\n\n\u2022 Two basic ways of software deployment with containers in the \ncloud\n\u2022 Using Kubernetes Clusters\n\u2022 More control, cluster management and container\n\u2022 Clouds provide Kubernetes clusters as a service\n\u2022 Deployment configuration must be provided by the customer\n\uf0e0Effort for realizing sensible load balancing, scaling\u2026\n\u2022 Using Docker Container Services\n\u2022 Control of containers, but not cluster management\n\u2022 Essentially, managing containers with more vendor-defined settings\n\u2022 Do not confuse with PaaS: Some CSPs allow Docker \ncontainers to be deployed to extend their PaaS products\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n50\ne.g. AWS EKS\nElastic Kubernetes Service\ne.g. AWS ECS\nElastic Container \nService\nContainers in the Cloud\n\nOption 1: Using Kubernetes Clusters\n\u2022 Closer to IaaS\n\u2022 More control\n\u2022 Container\n\u2022 Cluster management\n\u2022 Kubernetes cluster is provided by the \ncloud\n\u2022 Deployment configuration must be \nprovided by the customer\n\u2022 Effort for configuring load balancing, \nscaling, networking, \u2026\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n51\nContainers in the Cloud\ne.g. AWS EKS\nElastic Kubernetes Service\n\nOption 2: Using Docker Containers\n\u2022 Less control\n\u2022 Just Containers\n\u2022 No cluster management\n\u2022 Upload of Docker images to the cloud\n\u2022 Configuration is done via user interface \nor API\n\u2022 E.g. set minimum, maximum number of \ncontainers, port forwarding\n\u2022 Load balancing, scaling and networking \nis handled by the service\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n52\nContainers in the Cloud\ne.g. AWS ECS\nElastic Container \nService\n\n\u2022 Docker and Kubernetes are field-tested technologies that can \nbe run on-premise for developing and staging purposes\n\u2022 Danger of vendor lock-in is somewhat mitigated by relying on \nopen source technologies. However, cloud applications will \nprobably still use cloud-specific services\n\u2022 Deploying applications with Kubernetes is not trivial\n\u2022 Some PaaS services also allow uploading a Docker container\n\u2022 Not CaaS in a strict sense because Docker is merely used to enable \nmore flexible runtime environments\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n 53\nCaaS Considerations\n\n\u2022 Provides backend cloud storage and standardized solutions to \ncommon tasks to developers of web and mobile apps\n\u2022 Features usually include\n\u2022 Authentication\n\u2022 Analytics\n\u2022 Push notifications\n\u2022 Storage\n\u2022 Hosting\n\u2022 Serverless Functions\n\u2022 AWS Amplify, Google Firebase\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n54\nBackend as a Service (BaaS)\n\n\u2026 as a Service - Summary\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n55\nUser Control\nProvider Control\nIaaS\nPaaS\nSaaS\nhigh\nlow\nhigh\nlow\nFaaS\nBaaS\nCaaS\n\nLet\u2019s talk about Cost\nApp with Beanstalk (PaaS), Lambda (FaaS), and \nDatabase (IaaS) in a VPC\nMySQL \ninstance\nPublic subnet (eu-west-\n1b)\n10.0.7.0/24 \nDB Subnet Group\nSecurity \ngroup\nPublic subnet (eu-west-\n1a)\n10.0.6.0/24 \nAmazon Elastic Beanstalk\nS3 Bucket\nfor images\nTrigger\ns\nVPC\nEC2 \nNode\nApplication \nLoad Balancer\nApplication\nContainer\nAmazon Route 53\nwww.bookshelf.elasticbeanstalk.com\nVPN\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n56\n\nhttps://calculator.aws/#/estimate?id=67533da036ab59ffad9abc8\n0a940a40f2a9d4a73\n1 VPN Connection to VPC for administrative tasks\n~432000 images processed per month (~ 100 KB / image)\nAll required quantities for cost calculation are rough estimates!\n-> Know the profile of your Application for each service of Cloud \nprovider (monitor and evaluate continuously!)\n Cost estimation\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n57\n\nAWS Pricing - Reserved Instances \u2013 EC2 IaaS\n\u2022 Regional\n\u2022 no reserved capacity\n\u2022 discount for any EC2 \ninstance of applicable\ninstance family (e.g. t2) \nand OS in any AZ\n\u2022 instance size flexibility\n\u2022 Limit: 20 per Region per \nmonth\n\u2022 Zonal\n\u2022 no AZ flexibility\n\u2022 no instance size flexibility\n\u2022 guaranteed capacity\n\u2022 Limit 20 per AZ per month\n\u2022 Size flexibility\n58\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\nNormalizatio\nn\nfactor\nInstance \nsize\n0.25\nnano\n0.5\nmicro\n1\nsmall\n2 (reserved)\nmedium\n4\nlarge\n8\nxlarge\nt2.medium = 2 t2.small\nt2.medium = 0.5 t2.large\n\n\u2022 On Demand (pay as you\ngo) \u2013 most expensive and \nmost flexible\n\u2022 Standard\n\u2022 Fixed instance family, but \nchangeable size\n\u2022 Sellable on Marketplace \n(bank with US address\nrequired)\n \u2022 Convertible\n\u2022 Change instance family\n\u2022 more expensive than\nStandard\n\u2022 Not sellable on \nMarketplace\n\u2022 EC2 Instance Saving Plans\n\u2022 Cost commitment per hour\n\u2022 Fixed instance family, but changeable\nsize\n\u2022 Compute Saving Plans\n\u2022 Cost commitment per hour\n\u2022 Flexibility: all instance families and \nsizes\n\u2022 Reserved Pricing\n\u2022 Duration: 1 year or 3 years\n\u2022 Payment:\n\u2022 All Upfront\n\u2022 Partial Upfront\n\u2022 No Upfront (pay every month)\n AWS Pricing \u2013 EC2 Offering Classes\n59\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n\n\u2022 t2.medium \u2013 eu-west-1 \u2013 1 year\nAWS Pricing \nhttps://github.com/concurrencylabs/aws-pricing-tools\nCalculated using AWS Price List API (2021-05-26) and Concurrency Labs' AWS Pricing Tools\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n60\n\nPricing \u2013 Compute (IaaS)\n\u2022 On Demand\n\u2022 Discount \u2013 1 year commitment\n61\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n\nPricing - FaaS\nDuration is \nRounded to the \nNearest\nCost of Each \nAdditional 1 GB-\nsecond\nCost of Each \nAdditional 1 \nMillion Request\ns\nFree Monthly \nRequests\nFree Monthly \nDuration (GB-\nseconds)\n Provider\n1ms\n$0.000016\n$0.20\n1 Million\n400,000\nAWS\n1ms\n$0.000016\n$0.20\n1 Million\n400,000\nAzure\n100ms\n$0.0000125\n$0.40\n2 Million\n400,000\nGCP\n62\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n\nPricing \u2013 CaaS (Kubernetes)\n\u2022\nOn Demand monthly cost\n\u2022\n1Year commitment monthly cost\n63\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\nAdapted from https://github.com/sidpalas/managed-kubernetes-pricing/\n\n1. What is the Cloud?\n2. Cloud Service Models\n3. Why move / move not into the Cloud?\n4. Software Development for the Cloud\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n64\nOutline\n\n\u2022 Cost/CPU hour, Cost/storage may be\nmore expensive in the cloud, but\u2026\n\u2022 Easy 'in', (easy 'out' ?),\n\u2022 Time to Market (TTO)\n\u2022 Consider Total Cost of Ownership (TCO)\n \u2022 Personnel, Skillset\n\u2022 Housing, electricity etc.\n \u2022 Elasticity (be able to handle peak loads), risk\n\u2022 New types of applications\n\u2022 Cloud Providers can leverage\neconomies of scale\n\u2022 Very large data centers 10s of\n1000s / 10000s\n\u2022 Reuse the same hardware for\ndifferent customers\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n66\nSource:\nMicrosoft Cloud Computing Whitepapers,\n\u201cThe Economics of the Cloud\u201d, 2010\nReasons to Move into the Cloud\n\n\u2022 Data center contract renewals\n\u2022 Acquisitions\n\u2022 Increased capacity requirements\n\u2022 e.g. rapid growth of userbase\n\u2022 Software and hardware refresh cycles\n\u2022 Security threats\n\u2022 Compliance needs\n\u2022 Product development benefits\n\u2022 End-of-life events\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n67\nSrc: https://cloud.google.com/blog/products/storage-data-transfer/8-common-reasons-why-enterprises-migrate-to-the-cloud\nTriggers to Move into the Cloud\n\n\u2022 Availability of Service\n\u2022 Data Lock-In\n\u2022 Data Confidentiality and Auditability\n\u2022 Data Transfer Bottlenecks\n\u2022 Performance Unpredictability\n\u2022 Scalable Storage\n\u2022 Bugs in Large-Scale Distributed Systems\n\u2022 Scaling Quickly\n\u2022 Reputation Fate Sharing\n\u2022 Software Licensing\n\u2022 Compounded pricing\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n68\nClaude Shannon,\ncreator of modern\ninformation theory;\nSecurity is a question\nof attacker\u2019s computing\npower, key safety and\ninformation leakage\nper message.\n The cloud changes\ntwo important factors\nnegatively:\n\u2022\nattacker power\n\u2022\nattacker incentive\nSrc: Michael Armbrust et al., \u201cAbove the Clouds: A Berkeley View of Cloud \nComputing\u201d, UCB Tech. Reports, 2009:\nReasons to Stay Off the Cloud\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n69\nWhy is Everybody so Keen on Choosing\none Single Cloud Provider?\n\n\u2022 Q4 2018\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n70\nSrc: https://www.srgresearch.com/articles/fourth-quarter-growth-cloud-services-\ntops-banner-year-cloud-providers\nCloud Provider Selection - I\n\n\u2022 Certifications & Standards\n\u2022 Technologies & Service Roadmap\n\u2022 Data Security, Data Governance and Business policies\n\u2022 Service Dependencies & Partnerships\n\u2022 Contracts, Commercials & SLAs\n\u2022 Reliability & Performance\n\u2022 Migration Support, Vendor Lock in & Exit Planning\n\u2022 Business health & Company profile\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 \n2023\n71\nSrc: https://www.cloudindustryforum.org/content/8-criteria-ensure-you-select-right-cloud-service-provider#sdep\nCloud Provider Selection - II\n\n\u2022 BSI: Anforderungskatalog Cloud Computing (C5)\n\u2022 Cloud Computing Compliance Controls Catalogue\n\u2022 Environmental parameters\n\u2022 System description\n\u2022 Jurisdiction and locations of data storage, processing and backup\n\u2022 Disclosure and investigatory powers\n\u2022 Certifications\n\u2022 ISO/IEC 27017: Guidelines specially for cloud computing, \ncomplementary to:\n\u2022 ISO/IEC 27001 and ISO/IEC 27002 information security standards\n\u2022 Big cloud providers usually have them all (also Alibaba)\n Introduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n72\nCloud Provider Selection - III\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n73\nExemplary Use Cases\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n74\nCloud-Only Services - I\nPraxis Dr. M\u00fcller\nPraxis Dr. Schmitt\nExample: \u201edigital \nService-Mgt.\u201c\n\u2022 List of bought \nproducts\n\u2022 Value-Added \nServices\n\u2022 Personal contact \ndata\n\u2022 Online inbox \nfunctionality\n\u2022 Maintenance \ninformation\nImage Src.\n Jason Taix, Pixabay\nStockSnap, Pixabay\nMichal Jarmoluk, Pixabay\n\nIntroduction to the Cloud for IT Managers - Lion5 GmbH \n\u2013 Dr. Andreas Sch\u00f6nberger - \u00a9 2023\n75\nCloud-Only Services - II\nGCP Region EU-Central1\nnginx\nApplication Server\n(Linux on GCE)\n Load\nBalancer\n(Google)\nnginx\nApplication Server\n(Linux on GCE)\nnginx\nApplication Server\n(Linux on GCE)\n Disclaimer: There are a lot more technical options!\n NoSQL Store\nDr. M\u00fcller\nDr. Schmitt\nDentist Clarke\nDentist Osborne\nEssentially, you provide an account management application where \nyou may allow the dentist to manage devices / users himself.\n\n\n                Question:\n            ",
        "generated_answer": "What is the main idea of the passage?",
        "timestamp": "2025-05-21T18:48:24",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n",
            "This is the typical Firestore that you use with Firebase apps. It's optimized for\nserverless setups with Firebase services.\n - Example: Building a mobile chat app where Firestore (in native mode) manages real-time\nmessaging.\n2. Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other.",
            "They might start with basic fields like 'name' and 'email'. Later, they could decide\nto add 'hobbies', 'workplace', or 'education' without restructuring the entire database.\n\n Firestore - Native and Datastore Mode\nFirestore originally evolved from Google Cloud Datastore. The distinction is mostly historical:\n1. Native Mode: This is the typical Firestore that you use with Firebase apps. It's optimized for\nserverless setups with Firebase services.\n - Example: Building a mobile chat app where Firestore (in native mode) manages real-time\nmessaging.\n2. Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot"
        ],
        "prompt": "\n                You are an assistant for a university level course.\n\n                Use only the information from the context. If the answer is not present in the context, say \"I don't know.\" \n                Respond with one exam-style question, clearly phrased.\n\n                Example:\n                Context:\n                A distributed system is a collection of independent computers that appear to the user as a single system.\n\n                Question:\n                What is a distributed system?\n\n                ---\n\n                Now use the following context to generate a question.\n\n                Context:\n                Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\n\nThis is the typical Firestore that you use with Firebase apps. It's optimized for\nserverless setups with Firebase services.\n - Example: Building a mobile chat app where Firestore (in native mode) manages real-time\nmessaging.\n2. Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other.\n\nThey might start with basic fields like 'name' and 'email'. Later, they could decide\nto add 'hobbies', 'workplace', or 'education' without restructuring the entire database.\n\n Firestore - Native and Datastore Mode\nFirestore originally evolved from Google Cloud Datastore. The distinction is mostly historical:\n1. Native Mode: This is the typical Firestore that you use with Firebase apps. It's optimized for\nserverless setups with Firebase services.\n - Example: Building a mobile chat app where Firestore (in native mode) manages real-time\nmessaging.\n2. Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot\n\n                Question:\n            ",
        "generated_answer": "What is Firestore?",
        "timestamp": "2025-05-21T18:48:25",
        "group_id": "Team NNN"
    }
]