[
    {
        "question": "What is the Java EE full form?",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition",
        "timestamp": "2025-05-21T21:09:48",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-21T21:09:49",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-21T21:09:53",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the Java EE full form?",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition",
        "timestamp": "2025-05-21T21:12:37",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-21T21:12:38",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-21T21:12:42",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the Java EE full form?",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition",
        "timestamp": "2025-05-21T21:19:38",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-21T21:19:39",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-21T21:19:43",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the Java EE full form?",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition",
        "timestamp": "2025-05-21T21:26:20",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-21T21:26:22",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise-level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-21T21:26:27",
        "group_id": "Team NNN"
    }
]