[
    {
        "question": "What is the Java EE full form?",
        "task": "qa",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition)",
        "timestamp": "2025-05-22T10:11:34",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "task": "qa",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-22T10:11:36",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "task": "qa",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-22T10:11:41",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the Java EE full form?",
        "task": "qa",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition)",
        "timestamp": "2025-05-22T10:29:21",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "task": "qa",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-22T10:29:23",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "task": "qa",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-22T10:29:28",
        "group_id": "Team NNN"
    },
    {
        "question": "",
        "task": "summarization",
        "retrieved_chunks": [
            "master theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n"
        ],
        "prompt": "You are an academic assistant.\nSummarize the following content clearly and concisely.\n\nExample:\nContent:\nMachine learning is a field of artificial intelligence that uses statistical techniques to give computer systems the ability to learn from data.\nSummary:\nMachine learning enables computers to learn from data using statistical methods.\n\nNow summarize the following content:\nContent:\nmaster theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n",
        "generated_answer": "Summary: Thinks Lion5 is the one and only (Disclaimer: this is my personal opinion) Thinks Bamberger Beer is the one and only (Disclaimer: this is my personal opinion) Connect on Facebook, LinkedIn Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg  Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Prime",
        "timestamp": "2025-05-22T10:29:36",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the full form of JPA?",
        "task": "mcq",
        "retrieved_chunks": [
            "Session based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n"
        ],
        "prompt": "You are a quiz assistant. Use the provided context to answer the question. Choose one letter from the given options.\n\nExample:\nContext:\nParis is the capital of France, known for its art, fashion, and culture.\nQuestion:\nWhat is the capital of France?\nOptions:\na) Rome\nb) Berlin\nc) Paris\nAnswer:\nc\n\nNow answer the following question:\nContext:\nSession based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n\nQuestion:\nWhat is the full form of JPA?\nOptions:\na) Java Persistent API\nb) Java Pascal Andromeda\nc) Japan Paris America\nAnswer:",
        "generated_answer": "One-to-One",
        "timestamp": "2025-05-22T10:29:37",
        "group_id": "Team NNN"
    },
    {
        "question": "You are ugly and stupid!",
        "task": "classification",
        "retrieved_chunks": [
            "Try to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n"
        ],
        "prompt": "You are a content moderation system. Use the following reference rules to decide whether the input is offensive or non-offensive.\n\nExample:\nRules:\nProfanity, hate speech, and personal attacks are considered offensive.\nInput:\nYou are a terrible person!\nClassification:\nOffensive\n\nNow classify the following input:\nRules:\nTry to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n\nInput:\nYou are ugly and stupid!\nClassification:",
        "generated_answer": "Non-offensive",
        "timestamp": "2025-05-22T10:29:38",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the Java EE full form?",
        "task": "qa",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition)",
        "timestamp": "2025-05-22T10:34:57",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "task": "qa",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-22T10:34:58",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "task": "qa",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-22T10:35:03",
        "group_id": "Team NNN"
    },
    {
        "question": "",
        "task": "summarization",
        "retrieved_chunks": [
            "master theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n"
        ],
        "prompt": "You are an academic assistant.\nSummarize the following content clearly and concisely.\n\nExample:\nContent:\nMachine learning is a field of artificial intelligence that uses statistical techniques to give computer systems the ability to learn from data.\nSummary:\nMachine learning enables computers to learn from data using statistical methods.\n\nNow summarize the following content:\nContent:\nmaster theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n",
        "generated_answer": "Summary: Thinks Lion5 is the one and only (Disclaimer: this is my personal opinion) Thinks Bamberger Beer is the one and only (Disclaimer: this is my personal opinion) Connect on Facebook, LinkedIn Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg  Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Prime",
        "timestamp": "2025-05-22T10:35:10",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the full form of JPA?",
        "task": "mcq",
        "retrieved_chunks": [
            "Session based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n"
        ],
        "prompt": "You are a quiz assistant. Use the provided context to answer the question. Choose one letter only from the given options.\n\nExample:\nContext:\nParis is the capital of France.\nQuestion:\nWhat is the capital of France?\nOptions:\na) Rome\nb) Berlin\nc) Paris\nAnswer:\nc\n\nNow answer the following question:\nContext:\nSession based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n\nQuestion:\nWhat is the full form of JPA?\nOptions:\na) Java Persistent API\nb) Java Pascal Andromeda\nc) Japan Paris America\nAnswer:",
        "generated_answer": "One-to-One",
        "timestamp": "2025-05-22T10:35:11",
        "group_id": "Team NNN"
    },
    {
        "question": "You are ugly and stupid!",
        "task": "classification",
        "retrieved_chunks": [
            "Try to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n"
        ],
        "prompt": "You are a content moderation system. Use the following reference rules to decide whether the input is Offensive or Non-offensive.\n\nExample:\nRules:\nProfanity, hate speech, and personal attacks are considered offensive.\nInput:\nYou are a terrible person!\nClassification:\nOffensive\n\nNow classify the following input:\nRules:\nTry to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n\nInput:\nYou are ugly and stupid!\nClassification:",
        "generated_answer": "Non-offensive",
        "timestamp": "2025-05-22T10:35:12",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the Java EE full form?",
        "task": "qa",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition)",
        "timestamp": "2025-05-22T10:39:48",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "task": "qa",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-22T10:39:50",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "task": "qa",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-22T10:39:55",
        "group_id": "Team NNN"
    },
    {
        "question": "",
        "task": "summarization",
        "retrieved_chunks": [
            "master theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n"
        ],
        "prompt": "You are an academic assistant.\nSummarize the following content clearly and concisely.\n\nExample:\nContent:\nMachine learning is a field of artificial intelligence that uses statistical techniques to give computer systems the ability to learn from data.\nSummary:\nMachine learning enables computers to learn from data using statistical methods.\n\nNow summarize the following content:\nContent:\nmaster theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n",
        "generated_answer": "Summary: Thinks Lion5 is the one and only (Disclaimer: this is my personal opinion) Thinks Bamberger Beer is the one and only (Disclaimer: this is my personal opinion) Connect on Facebook, LinkedIn Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg  Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Prime",
        "timestamp": "2025-05-22T10:40:03",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the full form of JPA?",
        "task": "mcq",
        "retrieved_chunks": [
            "Session based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n"
        ],
        "prompt": "You are a quiz assistant. Use the provided context to answer the question. Choose one letter only from the given options.Always respond with a single letter (a, b, c, ...).\n\nExample:\nContext:\nParis is the capital of France.\nQuestion:\nWhat is the capital of France?\nOptions:\na) Rome\nb) Berlin\nc) Paris\nAnswer:\nc\n\nNow answer the following question:\nContext:\nSession based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n\nQuestion:\nWhat is the full form of JPA?\nOptions:\na) a) Java Persistent API\nb) b) Java Pascal Andromeda\nc) c) Japan Paris America\nAnswer:",
        "generated_answer": "n",
        "timestamp": "2025-05-22T10:40:04",
        "group_id": "Team NNN"
    },
    {
        "question": "You are ugly and stupid!",
        "task": "classification",
        "retrieved_chunks": [
            "Try to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n"
        ],
        "prompt": "You are a content moderation system. Use the following reference rules to decide whether the input is Offensive or Non-offensive. Only respond with one of the two categories: Offensive or Non-offensive.\n\nExample:\nRules:\nProfanity, hate speech, and personal attacks are considered offensive.\nInput:\nYou are a terrible person!\nClassification:\nOffensive\n\nNow classify the following input:\nRules:\nTry to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n\nInput:\nYou are ugly and stupid!\nClassification:",
        "generated_answer": "Non-offensive",
        "timestamp": "2025-05-22T10:40:05",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the Java EE full form?",
        "task": "qa",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition)",
        "timestamp": "2025-05-22T10:42:27",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "task": "qa",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-22T10:42:29",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "task": "qa",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-22T10:42:34",
        "group_id": "Team NNN"
    },
    {
        "question": "",
        "task": "summarization",
        "retrieved_chunks": [
            "master theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n"
        ],
        "prompt": "You are an academic assistant.\nSummarize the following content clearly and concisely.\n\nExample:\nContent:\nMachine learning is a field of artificial intelligence that uses statistical techniques to give computer systems the ability to learn from data.\nSummary:\nMachine learning enables computers to learn from data using statistical methods.\n\nNow summarize the following content:\nContent:\nmaster theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n",
        "generated_answer": "Summary: Thinks Lion5 is the one and only (Disclaimer: this is my personal opinion) Thinks Bamberger Beer is the one and only (Disclaimer: this is my personal opinion) Connect on Facebook, LinkedIn Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg  Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Prime",
        "timestamp": "2025-05-22T10:42:42",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the full form of JPA?",
        "task": "mcq",
        "retrieved_chunks": [
            "Session based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n"
        ],
        "prompt": "You are a quiz assistant. Use the provided context to answer the question. Choose one letter only from the given options.Always respond with a single letter (a, b, c, ...).\n\nExample:\nContext:\nParis is the capital of France.\nQuestion:\nWhat is the capital of France?\nOptions:\na) Rome\nb) Berlin\nc) Paris\nAnswer:\nc\n\nNow answer the following question:\nContext:\nSession based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n\nQuestion:\nWhat is the full form of JPA?\nOptions:\na) a) Java Persistent API\nb) b) Java Pascal Andromeda\nc) c) Japan Paris America\nAnswer:",
        "generated_answer": "n",
        "timestamp": "2025-05-22T10:42:42",
        "group_id": "Team NNN"
    },
    {
        "question": "You are ugly and stupid!",
        "task": "classification",
        "retrieved_chunks": [
            "Try to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n"
        ],
        "prompt": "You are a content moderation system. Use the following reference rules to decide whether the input is Offensive or Non-offensive. Only respond with one of the two categories: Offensive or Non-offensive.\n\nExample:\nRules:\nProfanity, hate speech, and personal attacks are considered offensive.\nInput:\nYou are a terrible person!\nClassification:\nOffensive\n\nNow classify the following input:\nRules:\nTry to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n\nInput:\nYou are ugly and stupid!\nClassification:",
        "generated_answer": "Offensive",
        "timestamp": "2025-05-22T10:42:43",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the Java EE full form?",
        "task": "qa",
        "retrieved_chunks": [
            "Definition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDefinition (Java Glossary):\n\u201cThe edition of the Java platform that is targeted at enterprises\nto enable development, deployment, and management of\nmulti-tier server-centric applications.\u201d\nGoals (Src: Java EE 8 Spec.):\n\u2022 \u201cEnterprises today need to extend their reach, reduce their costs, and lower \nthe response times of their services to customers, employees, and suppliers. \n \u2022 Typically, applications that provide these services must combine existing \nenterprise information systems (EISs) with new business functions that \ndeliver services to a broad range of users. The services need to be:\n\u2022\nHighly available, to meet the needs of today\u2019s global business environment.\n\u2022\nSecure, to protect the privacy of users and the integrity of the enterprise. \n \u2022\nReliable and scalable, to ensure that business transactions are accurately and promptly \nprocessed.\u201d [no change compared to JEE 7]\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\nJava EE defines a broad set \nof technologies and APIs for \nclient and server applications.\n Support depends on the \nenvironment!\n\u2022\nClient container\n\u2022\nWeb container\n\u2022\nEJB container\n6\nJava EE as Technology Toolkit\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSrc: Java EE 8 Spec\n\n7\nJava EE \u2013 the Database is Key\nJava EE 8 Specification:\n\u201cThe Java EE platform requires \na database, accessible through \nthe JDBC API,\nfor the storage of business data. \n The database is accessible \nfrom web components,\nenterprise beans, and \napplication client components.\n The database need not be \naccessible from applets.\u201d\n Src: Java EE 8 Spec\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n\u2022\nJava EE != Implementation\n\u2022\nJava EE is a specification\n\u2022\nSupported by \u201cnumerous\u201d vendors\n\u2022\nVendor independence\n\u2022\nJava Community Process (JCP) defines(d) the specifications\nNow moved to Jakarta EE\n\u2022\nSolution vendors provide application servers\n\u2022\nGlassFish (Java EE / Jakarta EE Community version)\n\u2022\nOracle WebLogic\n\u2022\nIBM Websphere Application Server (Commercial or Community)\n\u2022\n(Red Hat) JBoss Enterprise Application Platform\n\u2022\n\u2026\n\u2022\nApplication Server = Java EE implementation (formerly)\n\uf0e0today: Application Server = Any Enterprise Framework\n8\nJava EE \u2013 JCP and Community\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n9\nJava EE \u2013 Core Paradigm\nSrc: EJB 3.2 Spec\nEJB 3.2 Specification:\n\u201cThe Enterprise JavaBeans architecture will make it easy to write applications:\napplication developers will not have to understand low-level transaction and\nstate management details, multi-threading, connection pooling,\nor other complex low-level APIs.\u201d\n Core Principles:\n1. Implicit Services\n2. Interceptors\n3. Dependency\nInjection\n4. Annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n\n10\nJava EE \u2013 Transactions as Implicit Service\nJava EE 8 Specification:\n\u201cThis specification does not require the Product Provider to implement any particular\nprotocol for transaction interoperability across multiple Java EE products.\n Java EE compatibility requires neither interoperability among identical\nJava EE products from the same Product Provider, nor among heterogeneous\nJava EE products from multiple Product Providers.\u201d\n Src: EJB 3.2 Spec\nDB\nTx-Mgr.\nConn.\n1; 6\n2\n3\n5\n4\n7\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\nSchematic presentation!\n This is the simple case,\nthink of multiple dbs, \nejb modules, containers\n\nBuilding a full stack app \nwith Spring \npart II\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n11\n\nWhy Spring\nand \nnot Java EE / Jakarta EE?\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n12\n\nWhy Spring Boot?\n [1] Jrebel: 2020 Java Technology Report: Diagrams are generated out of 400 responses from Java development professionals\nSource: https://www.jrebel.com/blog/2020-java-technology-report\n[2] Jetbrains developer survey: https://www.jetbrains.com/lp/devecosystem-2020/java/\n83%\n1%\n16%\nJAVA RUNTIME \nPLATFORMS [1]\nSpring Boot\nMicronaut\nOthers\n46%\n44%\n10%\nDEPLOYMENT \nMODELS [1]\nJAR\nApp Server\nOthers\n0\n20\n40\n60\n80\nxml, yaml files\nannotation based\ncode during startup\nFramework Configuration in % [1]\nCopied from [2] \nCopied from [2] \n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n13\n\nWhat is (early) Jakarta EE?\n\u2022\nFirst enterprise specification extending    \nJava SE\n\u2022\nFormerly J2EE (1999-2006) and Java \nEE (2006-2019)\n\u2022\nFull-blown application servers (e.g.\nGlassfish, Wildfly) and servlet containers\n\u2022\nA lot of configuration effort has to be \ndone, e.g. web.xml\n\u2022\nEJB (Java EE specification including \ne.g. concurrency, security ) based \nprogramming model (needs an app \nserver to work)\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview\nBoth ecosystems try to support developers writing enterprise code, but Spring\u2019s passion is \nto make enterprise coding easier and more transparent.\n What is Spring?\n\u2022\nEnterprise framework, ideas based on \nJ2EE, Java EE (selected specifications \nfrom the EE umbrella)\n\u2022\nFirst release in 2003 under Apache 2.0 \nlicense, written by Rod Johnson\n\u2022\nServlet container like Tomcat\n\u2022\nAnnotation based configuration and via \nproperties and profiles \n\u2022\nPOJO based programming model \n(framework does the work, e.g.\nconcurrency, security etc.)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n14\n\nSpring Framework\n\u2022\nSpring Framework is only the base project in the Spring Ecosystem. \n Extension projects include Spring Boot, Spring Security\u2026 All projects have a separate \ncode base.\n\u2022\nDesign Philosophy: Backward Compatibility\n\u2022\nDesign Philosophy: Late decisions: E.g. switching the database provider by configuration \nwithout changing your code.\n https://spring.io/projects\nhttps://docs.spring.io/spring-framework/reference/\nCore\nIoC Container, SpEL, AOP, Events, Resources\u2026\nTesting\nMock Objects, \nSpring MVC Test, \nWebTestClient \u2026\nData \nAccess\nTransactions, \nDAO Support, \nJDBC, OR \nMapping\u2026\nWebServlet\nSpring MVC, \nWebSocket, \nSTOMP \nMessaging\u2026\nWeb \nReactive\nSpring WebFlux, \nWebClient, \nWebSocket\nIntegration\nRemoting, JMS, \nJMX, Mail, \nScheduling, \nCaching\u2026\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n15\n\nPreliminary: Annotations\n\u2022\nIntroduced with Java 1.5\n\u2022\nAre a form of metadata, kind of \u201cdeclarative\u201d programming where programmer says what \nto do and the compiler/tools/runtime generate the code to do it\n\u2022\nMost important use cases\n\u2022\nInformation for the compiler (e.g. @SuppressWarnings)\n\u2022\nCompile-time processing (e.g. Lomboks @Data \u2013 also look at the build.gradle \u2013\nLombok only used during compile time)\n\u2022\nRuntime Processing (e.g. @Profile \u2013 a Spring annotation which profile is active \u2013\nshown at the next slides)\n\u2022\nSome Built-in Annotations (you may have already seen them)\n\u2022\n@Override \u2013 specifying that you override a method from a inherited class\n\u2022\n@SuppressWarnings \u2013 ignore some compiler warnings\n\u2022\n@Deprecated \u2013 useful when parts of the API should not be used any more \n(retrofitted in Java 9 with more information)\n\u2022\n@FunctionalInterface \u2013 supporting Lambdas introduced with Java 8\nhttps://docs.oracle.com/javase/tutorial/java/annotations/\nhttps://www.baeldung.com/java-default-annotations\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n16\n\nFirst Spring Annotations \u2013 demystifying first concepts\n\u2022\n@Configuration is used by default to indicate components of the application \n(an instance of these classes will be instantiated by the middleware)\n\u2022\n@Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nOverwhelmed?   \uf0e0No problem, wait for a few minutes and keep calm\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n17\n\nRunning Example I\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\npublic class Bicycle implements Vehicle {\n@Value(\"${vehicle.wheels}\")\nprivate int wheels;\n@Override\npublic String getWheelInfo() {\nreturn \"\u2026\" + this.wheels + \" wheels\";\n}\n}\nserver.port=7777\nvehicle.wheels=2\napplication.properties\npublic interface Vehicle {\npublic String getWheelInfo();\n}\n Vehicles identified during classpath scanning \n(we will discuss this in a few slides)\n Bean is instantiated and managed by the IoC\ncontainer (next slide)\nSelf-instantiating the Vehicle, in our case a \nBicycle\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n18\n\nSpring Framework Core - Dependency Injection \n\u2022\nInversion of Control (IoC) also known as Dependency Injection (DI)\n\u2022\nHigher level of decoupling: Objects do NOT know the location of their attributes\n\u2022\nObjects define their dependent attributes via constructor arguments or setters\n\u2022\nIoC Container injects the dependencies when creating the object\n\u2022\nBeans are objects managed by the Spring IoC container\n\u2022\nConfiguration Metadata: XML-based configuration, Annotation based configuration \n(@Autowired)\n\u2022\nSpring generally favors constructor injection\nhttps://docs.spring.io/spring-framework/reference/core.html\nConfiguration \nMetadata\nproduces\nSpring IoC\nContainer\nPOJOs\nSystem Ready \nfor Use\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n19\n\nRunning Example II\nSource code is available at samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n}\nCopied from Running Example I\n@RestController\n@RequestMapping(value = \u201cvehicle\")\npublic class VehicleController {\nprivate Vehicle vehicle;\n@Autowired\npublic VehicleController(Vehicle vehicle){\nthis.vehicle = vehicle;\n}\n@GetMapping\npublic String getInfo(){\nreturn vehicle.getWheelInfo();\n}\n}\nNecessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\n Necessary to invoke functionality via browser \nhttp://localhost:7777/vehicle (see later slides)\nIoC container managed bean is injected here \n(in our case a Bicycle object)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n20\n\nProfiles and Properties\n\u2022\nDifferent situations require different properties, think about running your app in dev and \nprod \n\u2022\nProfiles are the spring answer to this problem by defining suited properties, e.g. in \napplication-dev.properties and application-prod.properties\n\u2022\nVia @Configuration, @Bean and @Profile: possibility to create different objects \ndependent on the current profile (\uf0e0next slide)\n\u2022\nMethods with @Profile to create single beans are also possible\n\u2022\nVM arguments to start the application with a comma separated list of profiles\n-Dspring.profiles.active=\"profile1,profile2\u201c\n\u2022\nWhen nothing is specified, \u201cdefault\u201d is used (resulting in usage of application.properties)\n https://docs.spring.io/spring-framework/reference/core/beans/environment.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n21\n\nRunning Example III\nSource code is available at REPO/samples/dependeny-injection\n@Configuration\npublic class Vehicles {\n@Bean\n@Profile(\"default\")\npublic Vehicle getBicycle(){\nreturn new Bicycle();\n}\n@Bean\n@Profile(\"dev\")\npublic Vehicle getTricycle(){\nreturn new Tricycle();\n}\n@Bean\n@Profile(\"prod\")\npublic Vehicle getCar(){\nreturn new Car();\n}\n}\n Extended compared to Running Example I\nserver.port=7777\nvehicle.wheels=2\napplication.properties\nvehicle.wheels=3\napplication-dev.properties\nvehicle.wheels=4\napplication-prod.properties\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n22\n\nClasspath Scanning\n\u2022\nClasspath is scanned at startup and all beans and components are instantiated by the \nframework resulting in the ApplicationContext (sum of all configured components and \nbeans)\n\u2022\nMost of the beans at runtime come from the included dependencies \n(that\u2019s the reason for the autoconfiguration magic you see)\n\u2022\nSpecialized annotations for different layers of the application\nFigure inspired by https://springbootdev.com/2017/07/31/spring-framework-component-service-repository-and-controller/\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\n@Component\n@Controller\ngeneral purpose annotation\nMVC \u2013 presentation \nlayer\n@Service\nBusiness layer\n@Repository\nPersistence layer\n@Configuration\n@Bean\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n23\n\nFirst Summary: What have we seen so far?\n Important Spring Annotations\n\u2022\n@Service, @Controller, @Repository are specializations of generic @Component\n\u2022\nThese annotations and @Configuration are used by default by the classpath scanning \nprocess to indicate components of the application\n\u2022\nTheir corresponding behavior (the annotation\u2019s semantic) is executed at runtime\n\u2022\n E.g. @Configuration indicates that this class contains bean definitions\n\u2022\n@Bean annotation specifies the factory method, where the object is instantiated. Beans \nalso have a lifecycle (@PostConstruct and @PreDestroy methods can be specified)\n\u2022\nComposed annotations for ease of usage, e.g. @RestController is composed of \n@Controller and @ResponseBody\n\u2022\n@Value(\u201c${PROPERTY-NAME}\u201d) - reading properties from property files at runtime\nhttps://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html\nhttps://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n24\n\nSpring vs. Spring Boot \nSrc and copyright: https://img.devrant.com/devrant/rant/r_1867059_KBtFw.gif\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n25\n\nhttps://www.baeldung.com/spring-vs-spring-boot\nSpring Boot at a glance\n\u2022\nExtension of the spring framework (spring framework is complex to use & configure)\n\u2022\nEliminating boilerplate configuration for setting up spring application - autoconfiguration\n\u2022\nProperty based configuration\n\u2022\nBuild dependency management via starters\n\u2022\nIntegrated embedded server, per default Tomcat\n\u2022\nResolves application context: Servlet, Filter and ServletContextInitializer\n\u2022\nScanning the classpath and identifying candidate components (beans)\n@SpringBootApplication\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n26\n\nSpring Boot \u2013 Autoconfiguration and Starters\n\u2022\nAutoconfiguration (beyond component scanning and dependency injection) uses \nknowledge contained in the classpath, environment variables etc. to decide which \ncomponents are needed and how they interact with each other/wired together.\n \u2022\nA lot of configuration parameters have reasonable defaults, this is why it\u2019s called auto \n(mostly you do not have to alter the config)\n\u2022\nStarters are a smart way of specifying build dependencies. You can include it as a single \ndependency in your build file. Transitively a set of dependencies with aligned versions \nare included in your project.\n \u2022\nSpring Boot\u2019s naming convention for starters: spring-boot-starter-*\nWhen defining your own starter, do not use spring-boot as prefix\nhttps://docs.spring.io/spring-boot/docs/3.1.4.RELEASE/reference/pdf/spring-boot-reference.pdf\n\u201cI\u2019d like to show you some example code that demonstrates autoconfiguration. But I can\u2019t. \n You see, autoconfiguration is much like the wind. You can see the effects of it, but there\u2019s \nno code that I can show you [\u2026] It\u2019s this lack of code that\u2019s essential to autoconfiguration\nand what makes it so wonderful.\u201d \n (Craig Walls: Spring in Action, fifth edition, Manning Publications, 2019, page 6).\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n27\n\nCore starter, including auto-configuration support, logging and \nYAML\n\u2022\nspring-boot-\nstarter\nStarter for building web, including RESTful, applications using \nSpring MVC. Uses Tomcat as the default embedded container\n\u2022\nspring-boot-\nstarter-web\nStarter for building MVC web applications using Thymeleaf views\n\u2022\nspring-boot-\nstarter-\nthymeleaf\nStarter for testing Spring Boot applications with libraries including \nJunit, Hamcrest and Mockito\n\u2022\nspring-boot-\nstarter-test\nJava annotation library which helps to reduce boilerplate code\n\u2022\nlombok\nProvides fast application restarts, LiveReload, and configurations \nfor enhanced development experience.\n \u2022\nspring-boot-\ndevtools\nSpring Boot Starters\nSource Code: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters \nComprehensive List of Starters: https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#using.build-systems.starters\nDescriptions are taken from  the docs or the spring initializr website\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n28\n\nSpring Boot Starter Web Example\nDependency tree, when including spring-boot-starter-web in your build.gradle\nspring-boot-starter-web (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/build.gradle)\norg.springframework:spring-web\norg.springframework:spring-webmvc\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter\")\norg.yaml:snakeyaml\njakarta.annotation:jakarta.annotation-api\norg.springframework:spring-core\nproject(\":spring-boot-project:spring-boot\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-autoconfigure\") (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/build.gradle)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-json\") (\u2026)\n\u2026\nproject(\":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat\") (\u2026)\n....\n60 external libraries are included in your app when including this single dependency\nAND all versions and dependencies are compatible to each other!!\n\nQuestion:\nWhat is the Java EE full form?\nAnswer:",
        "generated_answer": "Java Enterprise Edition)",
        "timestamp": "2025-05-22T10:43:55",
        "group_id": "Team NNN"
    },
    {
        "question": "What is full form of FAAS?",
        "task": "qa",
        "retrieved_chunks": [
            "Is FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nIs FaaS / BaaS a \nsubdomain of PaaS or \nreally a new service \nmodel?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nWhy the hype about Serverless?\n52\n\uf071Function as a Service (FaaS) caused this hype since 2014\n(AWS Lambda release)\n Remark: Serverless and FaaS sometimes used as synonyms\n\uf071FaaS is a neat tool for hybrid architectures\nLet\u2018s talk about FaaS\u2026 \uf04a\n\uf071FaaS providers offer a fully managed runtime environment for executing functions in the cloud \u2013\neasy to use without getting started with a web framework\n\uf071Promise of FaaS: Users don\u2019t care about any nitpicky server configurations\n\uf071Endless scalability enabled by statelessness of functions\n\uf071Proceeds the trend to more fine-grained architectures started with microservices\nThe marketing \nmachine works!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFunction as a Service (FaaS) [Eyk2017]\n53\n\uf071FaaS is an event-driven computing model\n\uf071FaaS is a cloud service model, where a provider\n\uf0a7provides a managed execution environment\n\uf0a7abstracts (nearly) all operational tasks (gain of control)\n\uf0a7facilitates auto-scaling of short-lived, context-unaware cloud functions\n\uf0a7facilitates scaling to zero (no idle running functions, unique for FaaS?)\n \uf0a7enables a pay-per-use cost model\n(most granular billing option in present cloud technologies)\n\uf071FaaS is a cloud service model, where a user\n\uf0a7writes single-threaded, performant, stateless cloud functions\n\uf0a7specifies only a few configuration parameters (e.g. RAM, timeout)\nIMO, a PaaS \nfocusing on \nfunctions.\n Do \nphi{Faas/PaaS} \nand check \ncorrectness of \nstatements\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Cloud Function Execution\n54\n\uf071Example: File upload in a S3 bucket, event processing\n\uf071Functions are executed\nin lightweight containers\n\uf071Cold starts are/were a\nmajor problem for FaaS\n\uf071Typical triggers\n\uf0a7Http based triggers (e.g. API Gateway)\n\uf0a7CRON triggers (e.g. Cloud Watch)\n\uf0a7Queuing/ Notification triggers ( e.g. SNS, SQS)\n\uf0a7Database triggers (e.g. DynamoDb, S3)\n Source: https://www.youtube.com/watch?v=eOBq__h4OJ4\nHey guys, \nwhat\u2019s wrong \nwith pooling?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Powerful Use Cases\n55\nSolving especially under-/overprovisioning problem\n\uf071Bursty Workloads\n\uf071Periodic Workloads \nYou can do \nthis with IaaS \nas well.\n FaaS makes it \nharder to get \nit wrong ;-)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n3-tier Architecture vs. FaaS Architecture\n56\nScope: Application with a mobile user interface, an authentication \nmechanism and some gameplay logic\n3-tier Architecture\nFaaS Architecture\nSource: adapted from [Roberts2017]\nNative mobile app (written \nfor iOS or Android)\n Java application server\nrunning on Tomcat\nRelational database,\ne.g. MySQL\nAuthentication \nService e.g.\nOAuth\nAPI Gateway\nDatabase, e.g.\nDynamoDb\nCloud Functions, e.g.\nAWS Lambda\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMigration Benefits\n57\n\u2022\nExpertise in configuring, \ndeploying and operating Java \napplication and database server \nrequired (Ops)\n\u2022\nAlso operating the host systems \n(security patches, licensing etc.) \n (Ops)\n\u2022\nThinking about security, \nscalability, availability etc. by \nourselves (DevOps)\nSeems more complicated at first \nglance, but\n\u2022\nhardly any operational tasks are \ndone by the service providers\n\u2022\nthe code is focused on core \nbusiness\n\u2022\nscaling, security etc. are service \ninherent\n\u2022\ncomponents are more decoupled \nand easier to change\n?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS Benefits\n58\n\uf071Scaling On-Demand and to zero\n\uf071Calculation Model (pay per use)\n\uf071Reduced Labor Cost\n\uf071Time to Market\n\uf071DevOps \n\uf071Rich Provider Ecosystems\n\uf071Quality settings per function, e.g., security\n(each cloud functions can be treated separately)\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nFaaS: Challenges / Liabilities\n59\n\uf071Provider Limits (i.e. timeout and memory setting)\n\uf071Testing (i.e. Integration Testing)\n\uf071Cold Starts (i.e. for time critical applications)\n\uf071Vendor Lock-In\n\uf071Loss of Control (HW/SW beneath)\n\uf071Network Latency within a FaaS Application\nThink of \nretest in case \nof env\nchanges!\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n60\n\uf071Use Case: Event organizer \u2013 Madonna Concert\nDue to the high expected traffic, the reactive component is implemented as cloud \nfunction\nNative mobile app and web \npage\nProcesses the order and \ninforms the customer about \nthe purchase\n(application server)\nStores the information on \nthe local database server\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nPossible system architecture\nPolls data to be able to \nhandle the incoming \nrequest rate\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHybrid Applications\n61\n\uf071Hybrid Applications come in handy when individual services have diverging \nscaling / env. requirements\n\uf071Always consider the scaling properties of your traditional (non-Serverless) \napplication part and the added cloud part\n\uf071Decoupling the two parts of your application via messaging or a database is the \nbest practice to avoid DoS attacking yourself\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nHands-On: FaaS Provider\n62\n\uf071Language matrix\nJava\nAWS Lambda\nGoogle Cloud Functions\nNode.js\nC#, Python, Go, \nPowerShell, Ruby,\nCustom Runtimes\nMicrosoft Azure Functions\nC#, F#, Python, \nTypeScript, PowerShell\nNode.js\nJava\nNode.js\nIBM Cloud Functions\n(OpenWhisk)\nNode.js\nPython, Go, .NET, \nRuby, PHP\nLast update on 12/7/2022\nJava\nSwift, Go, PHP, Python, \nany language via \nDocker container\nJava\n\nDistributed Systems Group\nFaculty Information Systems and Applied Computer Science \nUniversity of Bamberg\nHands-On\nAWS Lambda Functions written in Java, \nenabled by Eclipse Plugin\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\nWatch out for SDK \nchanges :\nhttps://docs.aws.amazo\nn.com/sdk-for-\njava/latest/developer-\nguide/home.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario\n64\n\uf071\nLambda is automatically integrated with CloudWatch, where all the \nlogs are stored\n\uf071The scenario and all required steps are also described here: \nhttps://github.com/johannes-manner/faas-demo\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items\nGET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nEnvironment of a single Function\n65\nTriggered By \nEvents\n(e.g. API calls, Notification \nmessages etc.)\n Scaling\n(dependent on the region\nbetween 500 and 3000 \nconcurrently)\n Monitoring\n(automatically monitored \nby CloudWatch, alarms \nand alerts)\nInternal API\n(Handler interface, \ncomparable with your main \nmethod in Java)\n Error Handling\n(Synchronous calls: \nPropagating errors to user;\nAsync: Retry or\nDeaD Letter Queue)\nContext\n(Information about \ninvocation, function and \nexecution environment)\nLogging\n(AWS is tightly integrated \nwith CloudWatch\n(LoggingService))\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nAWS Lambda \u2013 Function template\n66\npublic class AllItemsHandler\nimplements RequestHandler<Object, String> {\n@Override\npublic String handleRequest(Object input, Context context) {\ncontext.getLogger().log(\"Input: \" + input);\nreturn \"Hello from Lambda!\";\n}\n}\nHandler as a SAM (Single Abstract Method) Interface\nInput type of your Lambda function. Pre-integrated classes like SNSEvent or self-\nwritten POJOs are possible here \nOutput type of your Lambda function. \n Context Object with a lot of environmental support and information (e.g. logger, function \nname, log group etc.)\n CloudWatch creates for each function a log group, where the log streams (correspond \nwith the a single function container) are stored. Log streams include logged messages.\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nGetting all available items \u2013 Implementation and Deployment\n67\nUser\u2019s machine\nFaaS Provider (AWS)\n1\n2\nSelect a region where\nfunction is deployed to,\ne.g. eu-central-1 (Frankfurt)\n3   Create a S3 bucket to store your code\nMust be in the same region\nBucket: dsg-serverless\nRegion: eu-central-1\n4   Create an IAM role for your function\nAttach policies\nIAM-Role\nPolicies for CloudWatch\naccess\nSpecify memory setting and timeout\nDeployed to Lambda\nFurther Information on the GitHub Page: Get all items cloud Function - Doing all steps manually\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n68\n\uf071Sketch \u2013 Logical flow on AWS\n\uf071Go to the AWS console to your function\n\uf071Invoke the function with any test content\n\uf071Number of concurrent function invocations is unbounded. AWS limits the number per account to \n1000 concurrent function running at the same time. \n Invoking your function \nTrigger\nLoading function artifact\nResult\n1\n2\n3\nSpinning up a cloud     \nfunction in a container   4\n5  Execute the function\n6  Check Policies\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n69\n\uf071Create a new API\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nMaking your function available\n70\n\uf071Actions -> Create Resource : \nitems and enable CORS\n(comparable to @Path in JAX-RS)\n \uf071Click on your new resource items\n\uf071Action -> Create Method\n\uf071Select GET\n(comparable to @GET in JAX-RS)\n \uf071Click on Integration Request\n\uf071Click on MappingTemplate\nControls the mapping of the request data\nStores querystring parameters in a key:value list\n#set($allParams = $input.params())\n #set($params = $allParams.get(\"querystring\")){\n#foreach($paramName in $params.keySet())\n\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n#if($foreach.hasNext),#end\n#end\n}\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nDeploy your API\n71\n\uf071Action -> Deploy API\n\uf071Create New Stage, use \u201cdev\u201d as stage name\n\uf071Deploy\n\uf071Test your API Gateway and your function\n\uf071Open a REST interaction tool like INSOMNIA (https://insomnia.rest/) \n \uf071Creating a GET request\nhttps://####.execute-api.eu-central-1.amazonaws.com/dev/items?maxPrice=4000\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nScenario \u2013 so far\n72\n\uf071Next steps: \n\uf0a7Setting up DynamoDb\n\uf0a7Implementing the second integration via POST\nREST Endpoint\nPlacing an order\nValidates order and \ncustomer information\nStores the pre-computed \norder in a NoSQL cloud \ndatabase (scaling)\nREST Endpoint\nGetting all available items\nGetting all currently \navailable items (Mock \nservice)\n GET\nPOST\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nImplementation process so far . . .\n73\nSituation\n\uf071Working a lot with the AWS user interface\nProblem\n\uf071Configuring all services is tedious and error prone\n-> no reproducibility of your application architecture\nSolution\n\uf071Infrastructure automation (in our use case via CloudFormation)\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\nCloud Formation\n74\n\uf071CloudFormation is an \u201cInfrastructure as Code\u201d service\n\uf071Modelling your application in a .json or .yaml template\n\uf071CloudFormation automatically creates or updates the resources specified in the \ntemplate\n\uf071Benefits:\n \uf0a7Version control of your infrastructure (easier to detect changes over time)\n\uf0a7Automate your deployment and configuration (reproducibility, less errors)\n Source: https://aws.amazon.com/cloudformation/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up DynamoDB via CloudFormation\n75\ncloudFormation.yaml\n01 AWSTemplateFormatVersion: '2010-09-09'\n02 Description: Creates a dynamoDb instance\n03 Resources:\n04   OrderTable:\n05     Type: AWS::DynamoDB::Table\n06     Properties:\n07       AttributeDefinitions:\n08         - AttributeName: ID\n09           AttributeType: S\n10       KeySchema:\n11         - AttributeName: ID\n12           KeyType: HASH\n13       ProvisionedThroughput:\n14         ReadCapacityUnits: 5\n15         WriteCapacityUnits: 5\n16       TableName: Order\n1.\nSpecify your infrastructure\nExample is written in .yaml format \n(.json is also possible)\nLine 01, 02 are metainfos\n04 OrderTable is the logical ID of our table\n05 Type of our resource\n06-16 configuration of your DynamoDB table\n2.\n Create your application stack via web user \ninterface or CLI:\n> aws --region eu-central-1 \ncloudformation create-stack --stack-\nname serverless-stack --template-\nbody file://cloudFormation.yaml\n--region <name>: where your cloudformation\nstack is deployed to and also your resources\nSource: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 4 \u2013 Cloud Computing \u2013 B\n+     Setting up a cloud function via CloudFormation\n76\ncloudFormation.yaml\n01 StoreOrderFunction:\n02     DependsOn: LambdaExecutionRole\n03     Type: AWS::Lambda::Function\n04     Properties:\n05       Code:\n06         S3Bucket: ! Ref 'DSGBucket'\n07         S3Key: StoreOrder.jar\n08       FunctionName: DSG-StoreOrder\n09       MemorySize: 512\n10       Timeout: 20\n11       Handler: de\u2026.StoreOrderHandler\n12       Runtime: java8\n13       Role: ! GetAtt 'LambdaExecRole. Arn'\n14       Environment:\n15         Variables:\n16           REGION: ! Ref 'AWS::Region'\n1.\nPrepare your function\n- Upload the function source to a S3 bucket.\n - The S3 bucket and the function deployment   \nhave to be in the same region\n2.\nSpecify your function configuration \n02&13\nQuestion:\nWhat is full form of FAAS?\nAnswer:",
        "generated_answer": "I don't know.",
        "timestamp": "2025-05-22T10:43:57",
        "group_id": "Team NNN"
    },
    {
        "question": "How many types of Google firestore?",
        "task": "qa",
        "retrieved_chunks": [
            "Datastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n"
        ],
        "prompt": "You are an assistant for a university-level course.\nUse only the provided context to answer the question.\nIf the answer is not in the context, respond with: I don't know.\n\nExample:\nContext:\nJava EE stands for Java Platform, Enterprise Edition, which is used to develop enterprise level applications.\nQuestion:\nWhat is the full form of Java EE?\nAnswer:\nJava EE full form is Java Enterprise Edition.\n\nNow use the following context to answer the question.\nContext:\nDatastore Mode: This mode is optimized for Google Cloud-based apps and has its roots in\nthe older Google Cloud Datastore product.\n - Example: A GCP web service that manages data using the Datastore mode of Firestore.\n However, Google has been moving toward unifying the experience, and developers are\nencouraged to use Firestore in Native mode for new projects.\n Types of Firestores\nFirestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to\nthe database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.\n CRUD Process in Firebase\nCRUD stands for Create, Read, Update, Delete. Here's a simple example in Firestore:\n1. Create:\n```javascript\ndb.collection('users').add({\nname: 'Bob',\nage: 25,\nemail: 'bob@example.com'\n});\n```\n2. Read:\n```javascript\ndb.collection('users').doc('user123').get().then((doc) => {\nconsole.log(doc.data());\n});\n```\n3. Update:\n```javascript\ndb.collection('users').doc('user123').update({\nage: 26\n});\n\n```\n4. Delete:\n```javascript\ndb.collection('users').doc('user123').delete();\n```\nThis is a very high-level overview. In real applications, there are considerations for error\nhandling, handling collections, streaming data updates, and more.\nLimitations of Firestore:\n1. Cost: As the number of reads, writes, and stored data increases, costs can escalate.\n - Example: A high traffic app can rack up costs due to a large number of reads and writes.\n 2. Complex Queries: Firestore doesn't support SQL-like joins or complex queries.\n - Example: You can't easily fetch all books written by authors who live in a certain city without\nstructuring your data very specifically or making multiple requests.\n 3. Limited Transactions: Transactions are confined to a set limit of 500 writes.\n - Example: If you're updating stock for 600 items in a single transaction, it won't work.\n4. Cold Starts: Occasionally, there can be latency spikes on the first request to Firestore after a\nperiod of inactivity.\n - Example: An app's first request of the day might experience a slight delay.\n Native Mode vs. Datastore Mode:\n1. Native Mode:\n- Tailored for Firebase and mobile/web development.\n - Integrated with Firebase features like Cloud Messaging, Authentication, etc.\n- Real-time updates and offline access are key strengths.\n 2. Datastore Mode:\n- Older mode, primarily for Google Cloud Platform apps.\n- Lacks real-time capabilities of Native mode.\n - Integrated more deeply with GCP's older set of tools and services.\n Over time, Google has been encouraging developers to use Native mode due to its more\nmodern capabilities and integrations.\n\n Firestore API:\nThe Firestore API allows developers to interact with their Firestore database, performing\noperations like reading, writing, updating, and deleting data.\n How It Works:\n1. Initialization: Set up a connection to Firestore using Firebase SDK. This involves initializing\nthe Firebase app with configuration details.\n 2. Request & Response: Make a request to the Firestore database (e.g., retrieve a document,\nupdate data). Firestore processes the request and sends back a response.\n 3. Real-time Listeners: Unlike traditional databases, Firestore allows you to set up listeners on\nyour data. When the data changes, Firestore pushes the updated data to the app without\nneeding a new request.\n Process:\n1. Setup: Install Firebase SDK, initialize your app, and get a reference to the Firestore\ndatabase.\n 2. Interact with Data: Use the methods provided by the SDK to make CRUD operations:\n- `db.collection('...').add({...})` to create.\n- `db.collection('...').doc('...').get()` to read.\n- `db.collection('...').doc('...').update({...})` to update.\n- `db.collection('...').doc('...').delete()` to delete.\n 3. Listeners: To get real-time updates:\n- `db.collection('...').onSnapshot(snapshot => {...})`\n4. Security: Implement security rules to control access and modifications to the data.\n Examples:\n- Write Data: Store a new book in the \"books\" collection:\n```javascript\nconst db = firebase.firestore();\ndb.collection('books').add({\ntitle: 'The Great Gatsby',\nauthor: 'F. Scott Fitzgerald'\n});\n```\n- Read Data: Fetch details of the book with ID 'book123':\n```javascript\ndb.collection('books').doc('book123').get().then(doc => {\n\nif (doc.exists) {\nconsole.log(doc.data());\n}\n});\n```\nRemember, the Firestore API is vast, providing a plethora of functionalities ranging from basic\nCRUD to advanced querying, batch operations, and more.\n ### Example Scenario:\n**Background:**\nYou're working on a mobile application for a book club named \"Readers' Haven\". Members of\nthe club can read, review, and recommend books to each other. As the developer, you chose\nFirestore as the backend database for this app.\n **Firestore Structure:**\nYou have two main collections:\n1. `books`: Each document in this collection represents a book with fields like `title`, `author`,\n`genre`, and `summary`.\n2. `reviews`: Each document here is a review written by a club member with fields like `bookId`\n(referring to a book in the `books` collection), `userId`, `rating`, and `comment`.\n **Problem Statement:**\nA feature request comes in: Club members want a \"Recommended Reads\" section in the app\nthat showcases the top 3 books with the highest average rating, along with their latest review.\n\nQuestion:\nHow many types of Google firestore?\nAnswer:",
        "generated_answer": "Firestore is a single product; there aren't multiple \"types\" of Firestore. But if you are referring to the database's modes, then as mentioned, there's \"Native\" mode and \"Datastore\" mode.",
        "timestamp": "2025-05-22T10:44:02",
        "group_id": "Team NNN"
    },
    {
        "question": "",
        "task": "summarization",
        "retrieved_chunks": [
            "master theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n"
        ],
        "prompt": "You are an academic assistant.\nSummarize the following content clearly and concisely.\n\nExample:\nContent:\nMachine learning is a field of artificial intelligence that uses statistical techniques to give computer systems the ability to learn from data.\nSummary:\nMachine learning enables computers to learn from data using statistical methods.\n\nNow summarize the following content:\nContent:\nmaster theses\n\uf071Author and co-author of more than 30 scientific papers\n\uf071Thinks Lion5 is the one and only\n(Disclaimer: this is my personal opinion)\n\uf071Thinks Bamberger Beer is the one and only\n(Disclaimer: this is my personal opinion)\n \uf071Connect on Facebook, LinkedIn\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nOrganization\n4\n\uf071Who?\n\uf0a7Lectures\n\uf0a7Labs, Assignments (#=2), Tool Introductions\n\uf0a7Oral Examination\n\uf071Where and When?\n\uf0a7Lectures:  Fridays, 10:15-11:45 am, watch the course calendar\n\uf0a7Labs and Tool Introductions: Watch VC course\n\uf0a7Assignment work: self-organized, updates will be provided via VC course\n\uf071Support\n\uf0a7Consulting hours:\n\uf0a7Andreas Sch\u00f6nberger: get in touch via andreas.schoenberger@uni-bamberg.de\n\uf0a7Robin Lichtenth\u00e4ler: https://www.uni-bamberg.de/pi/team/lichtenthaeler-robin/\n\uf0a7Online: VC course forums, {robin.lichtenthaeler | andreas.schoenberger}@uni-bamberg.de\n\uf071More information\n\uf0a7DSG Homepage: http://www.uni-bamberg.de/pi/\n\uf0a7VC course: https://vc.uni-bamberg.de/course/view.php?id=70952\n+\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAnything is a Distributed System\n5\nhttp://www.w3.org/TR/ws-arch/\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course I\n6\n\uf071Aims\n\uf0a7Understand the characteristics of distributed systems and middleware\n\uf0a7Know relevant technologies and standards in the field and be able to combine some of these to develop \nbasic middleware solutions.\n \uf0a7Be able to discuss the benefits and drawbacks of distributed system architectures and middleware \ntechnologies.\n \uf071How will we do that?\n \uf0a7Domain overview and knowledge through lectures\n\uf0a7Understanding through hands-on examples and discussions\n\uf0a7Implementation capabilities through assignments\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nAims of the Course II\n7\nhttps://www.youtube.com/watch?v=L_E-mHo1Xcs\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that?\n8\n\uf071Industry\n\uf0a7_NO_ professional software development without distributed systems knowledge\n\uf0a7Candidates with theoretical background, analytical skills AND hands-on experience wanted\n\uf0a7Doers wanted, not windbags\n\uf0a7A lot of DSG graduates have great jobs today at great companies such as\nLion5, small consultancies, but also SAP, Datev, Siemens, Bosch, Allianz \u2026\n\uf071Academia\n\uf0a7Research methods frequently call for prototypic implementations\n\uf0a7Distributed Systems and, in particular, Cloud Computing in research focus\n\uf0a7A lot of DSG graduates do their PhD studies now\n\uf071Yourself?\n \uf0a7Still a lot of unsolved problems in a rapidly innovating area\n\uf0a7Focus on theory and practice possible\n\uf0a7Good starting point for theses\n\uf0a7Check out scientific work\u2026find out about interest in PhD studies?\n \uf0e8Apply for a research oriented thesis or an industry thesis\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWho Asks for that? \u2013\nThe Production Site Case\n9\nThe problem:\nFor a large production site (simplified view) local \ndata storages (1, 2 and 3) had to be updated in a \nconsistent manner and a reports database had to \nbe concurrently written.\n Yet, the development team did not implement \ndistributed transactions and mutual exclusion!\n 1\n3\n2\nReports\nThe effect:\nAn expert consultant had to review the \ncontrol mgt. system, parts of the system \nhad to be reimplemented and the \noriginal delivery date was delayed by \nhalf a year.\n Travel and consulting cost\n60\nk$\nReimplementation cost\n140\nk$\nDelay penalty\n6.5\nM$\nYour potential role in the game\n\uf071System/Software architect\n\uf071Expert consultant\n\uf071Project manager\nThis course is at the heart of your future professional life!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Succeed in this Course\n10\n\uf071Computer Science means actively trying out/applying theories, algorithms, modeling and \nprogramming languages.\n \uf071Practical computer science puts the emphasis on application scenarios, architecture development \nand software technologies\n\uf0e8This course is not about learning item lists by heart\n\uf071So,\u2026\n\uf0a7Check presented material against sample scenarios\n\uf0a7Try out, modify, recompile, test sample code\n\uf0a7Ask and discuss\n\u2026 on a weekly basis!\n \uf071You don\u2019t have to be a specialist in Spring, \u2026, Cloud, Databases, but you must be willing to \nspend some time on it\n\nLehrstuhl f\u00fcr Praktische Informatik \nFakult\u00e4t WIAI \nOtto-Friedrich-Universit\u00e4t Bamberg\n- Conceptual Foundations -\n11\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems\n12\n\uf071Definition:\n \u201cA distributed system is a collection of independent computers that appears to its users as a single coherent \nsystem.\u201d\n(Tanenbaum, Distributed Systems, Prentice Hall, 2016)\n\u201cWe define a distributed system as one in which hardware or software components located at networked \ncomputers communicate and coordinate their actions only by passing messages.\u201d\n(Coulouris, Dollimore, Kindberg, Distributed Systems, Addison Wesley, 2011)\n\uf0e8Distributed Computing =\n\u201cThe task of engineering, developing and running\nprograms on distributed systems\u201d\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nInfluence Factors on Distributed Computing\n13\n\uf071Core characteristics of distributed systems determine the programming paradigm\n\uf0a7Autonomous Entities / Partial Failures\n\uf0a7No Global Time\n\uf0a7No Global Memory\n\uf0a7Communication Errors\n\uf0a7Heterogeneity (technical, semantical)\n\uf0a7Complex Associations (dynamic bindings, multi-party)\n\uf071How do those characteristics influence the scenario below?\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Errors\n14\n\uf071But also local problems:\n\uf0a7Synchronization\n\uf0a7Scheduling\n\uf0a7\u2026\nIs that all?\n\uf0e8Failure Models\nVisualization by courtesy of\nGuido Wirtz\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nFailure Models\n15\n\uf071Make Assumptions about your Environment\n\uf071Examples\n\uf0a7Resource Discipline: Reservation of cinema tickets\n\uf0a7Spoiling: Control of UAVs\n\uf0a7Man-In-The-Middle:\n\uf0a7Similarly:\n\u2022 Activation of email account\n\u2022 Electronic tax declaration with personal certificate\u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nUse Distributed Systems in spite of Complexity?\n16\n\uf071You have to, the potential is too big!\n\uf0e0Flexibility, Robustness, Availability, Cost Savings\u2026\n\uf0a7Connectivity for actors of all sizes, data centers and mobile devices\n\uf0a7Integrate existing infrastructure and applications (EAI)\n\uf0a7Implement business processes across different company locations \n(EAI)\n\uf0a7Implement business processes across company boundaries (B2Bi)\n\uf0a7Only option for really dependable systems\n\uf0e8Almost every system is a distributed system!\n BEWARE: There\u2019s no such thing like a free lunch!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware to the Rescue\n17\n\uf071Middleware is the classical means to manage the complexity of distributed \nsystems, but what is middleware?\n \uf071Middleware is the software between\n\uf0a7\u2026application and operating system (local view)\n\uf0a7\u2026service user and service provider (global view)\nW. Emmerich: Software\nEngineering and Middleware \u2013\na Roadmap, ICSE 2000, Limerick\nClassical Layering Strategy\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nTypical Middleware Services\n18\n\uf071Middleware differs in which of the below services are offered\n\uf0a7Naming (Local vs. Remote References; Reference Injection)\n\uf0a7Transactions\n\uf0a7Persistency\n\uf0a7Security\n\uf0a7Lifecycle Management\n\uf0a7Scalability\n\uf0a7Replication (Consistency vs. Availability)\n \uf0a7Interoperability\n\uf0a7Vertical/Horizontal Clustering\n\uf071Middleware differs in how services are offered\n\uf0a7Explicit Use\n\uf0a7Transparent Use\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSample Discussion: Clustering\n19\n\uf071Aims\n\uf0a7Failover\n\uf0a7Load-Balancing\n\uf0a7Resource Usage\n\uf0a7Response Time\n\uf0a7Scalability\n\uf071Implementation Options\n\uf0a7Vertical: Multiple services on the same machine\n\uf0a7Horizontal: Multiple services on multiple machines\nDiscuss: Which option\nsatisfies which aim?\nIBM Redbooks:\nWebSphere Scalability:\nWLM and Clustering\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services I\n20\n\uf071Layering\n\uf0e8Precise assumptions needed!\n \uf071N-Tier-Architectures\nand Containers\n\uf071Deployment Descriptors\nHardware\nOS\nMiddleware\n\u2026\nNaming\nReliability\nSecurity\n\u2026\nPresentation\nLogic\nPersistency\nJavaScript\nServlets\nJPA\nJDBC\nOR/Mapper\nPOJOs\nSnychronous\nComponents\nAsynchronous\nComponents\nBrowser\nHTTPS\nRMI\nRMI\nSOAP\nHTTP\nHTTP\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services II\n21\nDistinguish between synchrony and asynchrony\u2026\n\uf071as a system classification:\n\uf0a7A distributed system is synchronous iff\n\uf0a7known upper time for message transmission\n\uf0a7known upper time for clock shift\n\uf0a7known upper time for processing jobs\n\uf0e8asynchronous otherwise\n\uf071as a communication quality:\n\uf0a7synchronous: sender blocks on call until transmission is done\n\uf0a7asynchronous: sender (potentially) is done before receive event fires\n\uf071as a classification of interaction:\n\uf0a7synchronous: sender waits for a reply\n\uf0a7asynchronous: after transmission, the sender does something else\nsee\nProf. Mendler\u2019s\ncourses\nreally\nimplementable?\n \uf0e0see next slide\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nExcursus: Coordinated Attack Problem\n22\nConsider this:\n\uf071Two allied generals occupy a fortified city\n\uf071Both have agreed to attack the city, but they have not agreed upon time\n\uf071The attack will only be successful if both generals attack at exactly the same time\n\uf071The ONLY way of communication is sending a messenger\n(NO mobile phones, NO fireworks, NO smoke signal!).\n However, messengers may be intercepted (and killed).\n Can the two generals agree upon a time for attack such that each\nof them can be sure about the other general\u2018s participation?\n (The generals and messengers do not lie!) \n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nHow to Provide Middleware Services III\n23\nDistinguish between the type of coupling:\n\uf071Pure signal: the message does not contain any data;\ncomputing is done based on the existence of the message\n\uf0e0Object.notify()/notifyAll() in Java (Thread synchronization)\n\uf071Structured/Unstructured data: the message contains data\nand the receiver knows how to process it\n\uf0e0send some text to a translation service\n\uf071Data and Command: the message contains data and a reference to a processing style\n\uf0e0send address data and whether to create/update an entry\n\uf071Data and Processor: the message contains data and executable code for processing it\n\uf0e0compute job or downloadable functionality\nDiscuss coupling in terms of interface, platform and application!\n Coupling := How many assumptions does the sender make about the receiver and vice versa?\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nMiddleware is Driven by Usage Scenarios\n24\n\uf071If you want high performance and dedicated functionality\n\uf0e8server/enterprise component technologies\n\uf0a7Centralized, consistent offering of functionality\n\uf0a7Failsafe, scalable, 24/7 service provision\n\uf071If you want interaction between independent entities\n\uf0e8Bus technologies, Peer-to-Peer systems\n\uf0a7Frameworks and infrastructure for bridging heterogeneity\n\uf0a7Provision of advanced communication facilities\n\uf071If you want something in between\n\uf0e8Choose a mix that fits!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWhere to Apply Middleware\n25\nNezhad et al., \u201cWeb services\nInteroperability Specifications\u201d,\nIEEE Computer, May 2006\n\uf0e0Be clear about which LAYER you are talking about!\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nWell-Known Types of Middleware\n26\n\uf071Message Queueing systems: Websphere MQ, MSMQ,\u2026\n\uf0e0typical EAI technology for decoupled interaction\n\uf071Transaction Processing Systems: IBM CICS, Oracle Tuxedo,\u2026\n\uf0e0natural evolution of database-centric computing on mainframes\n\uf071Bus technologies, most notably CORBA\n\uf0e0distributed objects on arbitrary platforms/prog. languages\n\uf071Domain specific technologies, EDIINT, AS2...\n\uf0e0support the paradigm of the domain, e.g., business document exchanges\n\uf071Web Services, SOA, RESTful services, and Microservices\n\uf0e0Interface technology for bridging heterogeneity\n(originally for light-weight, stateless interactions)\n\uf071Server-Centric systems: EJBs, Servlets, JSF, ASP .NET, \u2026\n\uf0e0Provision of functionality for different types of clients\n\uf071THE CLOUD\n\uf0e0Solves all problems you will ever have ;-)\n\uf071\u2026 and others: Grid, P2P, \u2026\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nDistributed Systems Programming\n27\nProgramming is hard, programming a DS is harder\n\uf071You have to consider more than one processing entity\nand specify the interactions between the entities\n\uf071You have to deal with concurrency errors\n\uf071You have to respect the features/limitations of your platform\n\uf071You have to define a failure model\n\uf071You may not be able to test your application in a realistic environment\n\uf0a7How many users will you have?\n\uf0a7What will be the peak performance required?\n \uf0a7What kind of scalability features do you have?\n\n Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\n\uf0e8Does the user realize she is using middleware?\n Leslie Lamport:\n\u201cA distributed system is one in which the failure of a computer\nyou didn't even know existed can render your own computer\nunusable.\u201d\n So, does the user have to think about the following\nfeatures of a particular service?\n\uf071Location: Can you use a remote service offline?\n\uf071Time: Do you have to be aware of when your job is scheduled?\n\uf071Availability: Do you have to care about failover strategies?\n\uf071Performance: Do you have to think about where your data is?\n\uf071Sharing: Do you have to think about concurrent users?\n Transparent Middleware Services?\n28\nhttp://research.microsoft.\n com/en-\nus/um/people/lamport/pu\nbs/distributed-system.txt\n\nDistributed Systems Group \u2013 WIAI \u2013 University of Bamberg\n\u00a9 Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Primer, Conceptual Foundations\nSOC as Distributed Computing Discipline\n29\n\uf071SOC = Service Oriented \nComputing\n\uf071The basic service interaction \nstyle implies an underlying \ndistributed system.\n \uf0e8Service interactions are \nsubject to all typical distributed \ncomputing problems which are \ndriven by distributed system \ncharacteristics.\n http://www.w3.org/TR/ws-arch/\nNOTE: SOC ! = SOA\nSOC\n\uf0e0Computing based on services\nSOA\n\uf0e0Architectural paradigm\nSee DSG-SOA-M for More Information!\n\n",
        "generated_answer": "Summary: Thinks Lion5 is the one and only (Disclaimer: this is my personal opinion) Thinks Bamberger Beer is the one and only (Disclaimer: this is my personal opinion) Connect on Facebook, LinkedIn Distributed Systems Group \u2013 WIAI \u2013 University of Bamberg  Dr. Andreas Sch\u00f6nberger, DSG-DSAM-M 2024/25 \u2013 1 \u2013 Prime",
        "timestamp": "2025-05-22T10:44:10",
        "group_id": "Team NNN"
    },
    {
        "question": "What is the full form of JPA?",
        "task": "mcq",
        "retrieved_chunks": [
            "Session based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n"
        ],
        "prompt": "You are a quiz assistant. Use the provided context to answer the question. Choose one letter only from the given options.Always respond with a single letter (a, b, c, ...).\n\nExample:\nContext:\nParis is the capital of France.\nQuestion:\nWhat is the capital of France?\nOptions:\na) Rome\nb) Berlin\nc) Paris\nAnswer:\nc\n\nNow answer the following question:\nContext:\nSession based or jwt auth . Other third party OAuth \n What is JPA and explain \nJPA stands for Java Persistence API (Application Programming Interface). It is a Java \nspecification that gives some functionality and standard to ORM tools. It is used to \nexamine, control, and persist data between Java objects and relational databases.\n Hibernate is a java framework and ORM (Object Relation Mapping) tool that is used \nto provide the implementation of the JPA methods. How does JPA Work? JPA is an \nabstraction that is used to map the java object with the database.\n Jpa relations \nJava Persistence API (JPA) is a specification for object-relational mapping (ORM) in Java. JPA \ndefines a set of annotations that can be used to map Java objects to database tables, and \nprovides a standardized way to work with relational databases in Java.\n JPA provides support for several types of relationships between entities in a relational \ndatabase. The most common types of relationships are:\nOne-to-One (1:1) Relationship: In a one-to-one relationship, each entity in one table is \nassociated with only one entity in another table, and vice versa. For example, a student and a \nstudent's address could have a one-to-one relationship, where each student has only one \naddress and each address belongs to only one student.\n One-to-Many (1:N) Relationship: In a one-to-many relationship, each entity in one table is \nassociated with many entities in another table, but each entity in the other table is associated \nwith only one entity in the first table. For example, a department and its employees could have \n  \nkevin Page 4\n  \n\na one-to-many relationship, where each department has many employees, but each employee \nbelongs to only one department.\n Many-to-One (N:1) Relationship: In a many-to-one relationship, many entities in one table are \nassociated with one entity in another table. For example, many employees could belong to one \ndepartment.\n Many-to-Many (N:N) Relationship: In a many-to-many relationship, each entity in one table can \nbe associated with many entities in another table, and vice versa. For example, a student could \nbe enrolled in many courses, and each course could have many students.\n JPA provides annotations, such as @OneToOne, @OneToMany, @ManyToOne, and \n@ManyToMany, to define these relationships between entities in Java classes. These \nannotations specify the mapping between the Java object model and the relational database \ntables, and allow JPA to generate the necessary SQL queries to manage the relationships \nbetween entities in the database.\n Dataflow in spring boot \nIn Spring Boot, data typically flows through a series of layers, each responsible for a different \naspect of the application's functionality. The most common layers in a Spring Boot application \nare the controller layer, service layer, and repository layer.\n Controller Layer: The controller layer is responsible for handling incoming HTTP requests and \nsending back HTTP responses. Controllers receive input from the user, validate it, and pass it to \nthe service layer for further processing. Controllers are typically implemented as Spring MVC \ncontrollers, which are annotated with @Controller or @RestController.\n Service Layer: The service layer is responsible for business logic and processing of data. Services \nreceive data from the controller layer, perform any necessary processing or manipulation, and \npass the data to the repository layer for persistence. Services are typically implemented as \nSpring services, which are annotated with @Service.\n Repository Layer: The repository layer is responsible for persistence of data. Repositories \nreceive data from the service layer, interact with the database or other data storage systems, \nand return the data back to the service layer. Repositories are typically implemented as Spring \nData JPA repositories, which are interfaces that define a set of methods for data access.\n The data typically flows from the controller layer to the service layer, and then to the repository \nlayer for persistence. When a user sends an HTTP request to the application, the request is first \nhandled by the controller layer, which receives the input from the user and validates it. The \ncontroller then passes the data to the service layer for further processing.\n The service layer performs any necessary business logic or data manipulation, and then passes \n  \nkevin Page 5\n  \n\nthe data to the repository layer for persistence. The repository layer interacts with the database \nor other data storage systems to store the data, and then returns the data back to the service \nlayer. The service layer then prepares the data to be sent back to the user, and the controller \nlayer sends an HTTP response back to the user.\n App engin language support \nGoogle App Engine primarily supports Go, PHP, Java, Python, Node. js, . NET, and Ruby \napplications,although it can also support other languages via \"custom runtimes\"\nSpring MVC @Controller\nWe can annotate classic controllers with the @Controller annotation. This is simply a \nspecialization of the @Component class, which allows us to auto-detect \nimplementation classes through the classpath scanning.\n We typically use @Controller in combination with a @RequestMapping annotation \nfor request handling methods.\n Spring MVC @RestController\n@RestController is a specialized version of the controller. It includes the @Controller\nand @ResponseBody annotations, and as a result, simplifies the controller \nimplementation:\nwhat is post mapping ?\n@PostMapping is a Spring MVC annotation that maps HTTP POST requests to a specific \ncontroller method in a Spring Boot application.\n When a client sends an HTTP POST request to the server, it typically includes data in the \nrequest body that the server needs to process. The @PostMapping annotation is used to map \nthe URL of the request to a specific controller method that will handle the processing of the \nrequest body.\n\nQuestion:\nWhat is the full form of JPA?\nOptions:\na) a) Java Persistent API\nb) b) Java Pascal Andromeda\nc) c) Japan Paris America\nAnswer:",
        "generated_answer": "invalid",
        "timestamp": "2025-05-22T10:44:10",
        "group_id": "Team NNN"
    },
    {
        "question": "You are ugly and stupid!",
        "task": "classification",
        "retrieved_chunks": [
            "Try to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n"
        ],
        "prompt": "You are a content moderation system. Use the following reference rules to decide whether the input is Offensive or Non-offensive. Only respond with one of the two categories: Offensive or Non-offensive.\n\nExample:\nRules:\nProfanity, hate speech, and personal attacks are considered offensive.\nInput:\nYou are a terrible person!\nClassification:\nOffensive\n\nNow classify the following input:\nRules:\nTry to understand the difference between PUT and PATCH and implement your API accordingly.\n Delete data\n\u2022\nDELETE: \nDeleting the data (response code 204)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n95\n\nHATEOAS - Making your API discoverable\n\u2022\nHypermedia as the engine of application state\n\u2022\nSpring Boot uses HAL flavor of hyperlinks\n\u2022\nAdd HATEOAS starter to your build to enable hyperlink support\n\u2022\nKeep caution: HATEOAS 1.0 was released previously and some examples on websites \nare with prior classes (check the docs)\n\u2022\nCollectionModel and EntityModel are the two important resource classes for \ncollections and single items\n \u2022\nWebMvcLinkBuilder is class with factory methods to assemble links\nhttps://github.com/mikekelly/hal_specification/blob/master/hal_specification.md\nhttps://docs.spring.io/spring-hateoas/docs/current/reference/html/#migrate-to-1.0.changes\n@GetMapping\npublic ResponseEntity<CollectionModel<EntityModel<Movie>>> getMovies() {\nIterable<Movie> movies = this.movieRepo.findAll();\nCollectionModel<EntityModel<Movie>> collection = CollectionModel.wrap(movies);\ncollection.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\n.methodOn(MovieRestController.class).getMovies()).withRel(\"movies\"));\nreturn new ResponseEntity<>(collection, OK);\n}\nImportant method \nfor wrapping  \ndomain data in \nHATEOAS object\nRelative link \ndesign (nice for \nrefactoring and \nupdates)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n96\n\nHow to structure your app \u2013 a double edged sword\n\u201cDo I use my domain objects also for building my REST API or\ndo I implement separate classes?\u201d\n\u2022\nDecision is project dependent, but in literature and on blogs is the orange way preferred\n\u2022\nSolves also a lot of JSON problems when implementing separate classes\nhttps://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application\nCraig Walls: Spring in Action, fifth edition, 2019, NOTE on page 115.\n Only domain classes\nDomain and REST API classes\n+ more flexible\n- boiler plate code\n+ loose coupling (evolvability)\n+ explicit coding\n- more restrictions (object relation    \ncaveats)\n+ smaller code base\n- tighter coupling (evolvability)\n- annotation based (lots of magic)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n97\n\nImportant JSON annotations \u2013 bidirectional relations\n\u2022\nExtend your domain classes with RepresentationalModel\n\u2022\nInfinite recursion when serializing data\n\u2022\nJPA can deal with this problem by having annotations like @ManyToMany(mappedBy\u2026)\n\u2022\nJackson (JSON utility) has no automatic way to deal with it \n\u2022\nJSON annotations are the only way to stop the recursion properly\n\u2022\n@JsonManagedReference (e.g., actors field in Movie, members with this annotation are serialized properly \u2013\nyou need a corresponding JsonBackReference)\n\u2022\n@JsonBackReference (e.g., movies field in Actor,  members with this annotations are not serialized \u2013 you need \na corresponding JsonManagedReference, recursion will end here for JSON)\n\u2022\n@JsonIgnore (as the name implies, members with this annotation are ignored during serialization and \ndeserialization process)\n\u2022\n@JsonIgnoreProperties (exclude only properties from JSON serialization process)\n\u2022\nOther useful JSON annotations\n\u2022\n@JsonView (defining different views, where different data is serialized)\n\u2022\n@JsonIdentityInfo (reduces the payload sent by the server)\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonManagedReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonBackReference.html\nhttps://fasterxml.github.io/jackson-annotations/javadoc/2.5/com/fasterxml/jackson/annotation/JsonIgnore.html\nhttps://www.baeldung.com/jackson-json-view-annotation\nhttps://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\nActor\nMovie\n*\n*\nFilmStudio\n1\n*\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n98\n\nHow to get links to your domain objects?\n This example is included in our demo project for getting all film studios. The other implemented REST endpoints are all implemented with separate REST interface \nobjects.\n public class FilmStudio extends RepresentationModel<FilmStudio> {\n// already defined\n}\npublic class FilmStudioAssembler extends \nRepresentationModelAssemblerSupport<FilmStudio, FilmStudio> {\npublic FilmStudioAssembler() {\nsuper(FilmStudioRestController.class, FilmStudio.class);\n}\n @Override\nprotected FilmStudio instantiateModel(FilmStudio entity) {\n return entity;\n }\n@Override\npublic FilmStudio toModel(FilmStudio entity) {\nreturn this.createModelWithId(entity.getId(), entity);\n}\n}\nRepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nConverter to convert the domain \nobject into the \nRepresentationalModel (in this \ncase both are the same)\nNot necessary to override it, but \nhighly recommended\nActual conversion\nCreate model with id is a nice \nhelper here to get the correct \nhyperlink\nBase path and model class\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n99\n\nHATEOAS Pitfalls - Jackson & Hibernate\n\u2022\nGetting weird (recursive output on screen)\n Solution: Using JsonManagedReference, JsonBackReference, \nJsonIgnoreProperties or JsonIgnore annotations\n\u2022\nGetting No serializer found for class \u2026 exception message\nSolution: Adapt your named entity graph \u2013 the problem is that hibernate uses an \ninterceptor class and loads entities when they are needed, but Jackson can\u2019t serialize \nthese interceptors (do not use \n@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"}))\n This introduces performance issues (additional fields and additional queries \u2013 check the \nconsole\u2019s sql statements)\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n100\n\nPitfalls \u2013 Jackson & Hibernate \u2013 different solutions\nCheck our possible implementation under microservices/dvd \u2013 there we used the named entity graph solution (more performant in normal situations)\n\u2022\nThe left solution performs two queries, one for movies and another (when the film studio \nis needed) for film studios\n\u2022\nThe right solution performs only a single query \nJsonIgnoreProperties\nNamedEntityGraph\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n101\n\nHow to get links to your domain objects?\n This example is included in our demo project microservices/dvd.\n The \u201cDomain and REST API class\u201d approach is also used for all other endpoints despite the one we\u2019ve already seen.\n public class MovieModel extends RepresentationModel<MovieModel> {\n@Getter private final String title;\n @Getter private final boolean wonOscar;\n@Getter private final int year;\n@Getter private final String coverImage;\n@Getter private final List<ShortActorModel> actors;\n@Getter private final ShortFilmStudioModel filmStudio;\n@Getter private final String username;\npublic MovieRepresentationalModel(Movie movie) {\n// initializing all fields\n}\n}\n RepresentationalModel is a \nhateoas class, marking this class \nas a potential Rest model\nCopy the members from the \nmovie class you want to expose \nto your customer (!!)\n Short versions of your model \nclasses with a subset of \nattributes (the hyperlink is \nincluded for navigating to the full \ninfo version).\n Keeps your responses small.\n public class MovieAssembler extends \nRepresentationModelAssemblerSupport<Movie, MovieModel> {\n//same methods and implementation as in film studio example\n}\nConverter to convert the domain \nobject (FilmStudio) into the newly \ncreated RepresentationalModel\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n102\n\nFull and Short Representations\nSituation: I want to get a list of movies\nResult:\n I get a list of movies, but also get all actor information and its related classes\nSolution: Defining also short representations where needed\n\u2022\nShort representations keep the response small\n\u2022\nInclude only the most important information in the context (e.g. the name of the actor \nand the link to his or her full info)\n\u2022\nDisadvantage is the additional LOC and classes\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n103\n\nRequest: http://localhost:8080/v1/movies\n{\n_embedded: {\nmovieRepresentationalModelList: [\n{\ntitle: \"Inception\",\nwonOscar: false,\nyear: 2010,\nactors:[\n{\nname: \"Leonardo Di Caprio\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/actors/2\"}}} \n],\nfilmStudio: {\nname: \"Warner Bros. Pictures\",\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/studios/1\"}}},\nusername: null,\n_links:{\nself:{\nhref: \"http://localhost:8080/v1/movies/1\"}}}, \n{ further movies }\n]\n},\n_links:{\nmovies:{\nhref: \"http://localhost:8080/v1/movies?page=0\" }}}\nShort versions of an actor, but you \ncan follow the link to get more \ninformation.\n You can adjust the root element \nname by another annotation at your \nrepresentational model class\n@Relation(value = \"movie\", \ncollectionRelation = \"movies\")\nSelf-link specifying the request\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n104\n\nSpring Data REST \u2013 mechanics in the background\nHINT: Consider the same points as on the blue marked slides with the the \u201cOnly domain classes\u201d banner\nFuther infos at https://docs.spring.io/spring-data/rest/docs/4.1.5/reference/html/\nModel POJO\nJPA Annotations\nRepository \nInterface\ntyped with\n1. Implement POJO model\n2. Add JPA Annotations to your POJO\n3. \u201cImplement\u201d Repository\n4. Start your App\nSpring Data Repo \nScanning\nCreate DB \nschema\n5. Automagically for H2\nAdd Spring Data REST starter to your project and Spring automagically \ngenerates a full-blown REST API out of your JPA annotated classes.\n \u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n105\n\nTo the cloud . . . \n Docker and Kubernetes are discussed in great detail in DSG-SOA, \nbut as with REST it is important to get an idea how to build a container to deploy it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n106\n\nDeployment: Plan zero \u2013 source code deployment\n\u2022\nSome platform offer version control integration, e.g. Heroku\n\u2022\nImplement your app and bind the repository to the platform\n\u2022\nDefine a script/trigger to start the build via a build tool and deploy application\nhttps://blog.heroku.com/six-strategies-deploy-to-heroku\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n107\n\nDeployment: First choice containers\n\u2022\nA container is an instance of an image\n\u2022\nAn image is a stack of layers, where only the top layer is writable\n(helps in organizing images efficiently and running container in performant way)\n\u2022\nDockerfiles are the skeleton of an image and makes image creation reproducible\n\u2022\nTo build your solution you need a JDK in Java (but JDK is huge in size \u2013 influencing the \nstartup and runtime behavior of your app)\n\u2022\nUsing only a JRE is sufficient to run your app in production\n\uf0e0Docker multi-staged builds to the rescue \n- first stage building the jar (JDK)\n- second stage copying the generated jar and run it (JRE)\n\uf0e0Only the last stage is included in the image\n\uf0e0Reduces the size from roughly 1GB to 300MB\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n108\n\n\u2022\nBuilder stage (not included in the image \u2013 only the last stage is included \u2013 beginning at \nlast FROM statement)\n\u2022\n\u201cImage stage\u201d \u2013 All commands here result in a single layer\n\u2022\nAccess to the builder stage and copying of the relevant file\nDocker \u2013 Building a multi-staged image\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n109\n\nSecond choice: Jar Deployment\n\u2022\nBuild a fat Jar (use the bootJar gradle command)\n\u2022\nSelect your platform of choice, e.g. Heroku, CloudFoundry\n\u2022\nInstall the CLIs and read the docs\n\u2022\nDeploy the jar or the repository with build file\n\u2022\nEnjoy your app in the cloud\n\u2022\nExample : PWS Pivotal Web Services\n\u2022\nInstall CLI\n\u2022\nLog In\n\u2022\nReduce source compatibility to 8, then: $ gradlew bootJar\n\u2022\nExecute:  $ cf push DVD-SERVICE -p PATH-TO-JAR\n\u2022\nUse Route to access it \uf04a\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n110\n\nTesting\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n111\n\nUnit Testing\n\u2022\nTest a single class in isolation or a method of this class\n\u2022\nNot influenced by Spring/Spring Boot\n\u2022\nVia starter (spring-boot-starter-test), a lot of useful libraries are included, JUnit 5, Spring \nTest & Spring Boot Test, AssertJ, Mockito, Hamcrest, JSONassert, JsonPath.\n https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration testing\n\u2022\nSpring helps with already known magic and a couple of new features to test the \ninteraction of various components\n\u2022\nSpring wires the components to be tested together within an application context\n\u2022\nLoading application context and caching them between tests (\u201call tests run in the same \nJVM\u201d)\n\u2022\nTransaction management: To not influence the persistent store, the testing \u201cframework \ncreates and rolls back a transaction for each test\u201d/ each transactional method.\n \u2022\nSupport by abstract classes of Spring\u2019s TestContext framework\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n112\n\nStub, Mock and Spy\n\u2022\nStubs\n\u2022\nAdditional test classes implementing business interfaces to simulate interaction between classes logically\n\u2022\n\u201cTest mirror\u201d of your business objects\n\u2022\n(+) You can add complex logic to the test classes and test your business objects accordingly\n\u2022\n(-) When logic changes, also the \u201ctest mirror\u201d classes must be changed\n\u2022\n(-) dependency trees, \u201ctest mirror\u201d class might also include other dependencies to business objects\u2026\n\u2022\nMocks\n\u2022\nMocking your business objects, behavioral interaction between your classes is tested (which methods are \ncalled, how often, which input parameters are used etc.) (behavioral testing)\n\u2022\n(+) Easy to use, no additional classes are needed\n\u2022\n(-) Only interaction is tested, result within a dependent class is not assessed\n\u2022\n(-) By invoking methods, nothing is executed logically\n\u2022\nSpies\n\u2022\nCreate a partial mock/facade of the real business object\n\u2022\n(+) methods which are not stubbed, will be executed from the real object\n\u2022\n(+) state testing of the real object is to some extent possible\n\u2022\n(-) real object involvement, think carefully about its dependencies\nMock vs. Spy: https://www.baeldung.com/mockito-spy\nComparison of 3 concepts: https://www.javatpoint.com/mock-vs-stub-vs-spy\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n113\n\nFrom SUT to Integration Testing over Unit Testing\nFigures inspired by: https://www.jrebel.com/blog/mock-unit-testing-with-mockito\nSystem under \nTest (SUT)\n Green: class in focus\nYellow: dependencies\nGrey: other unrelated classes\nUnit test\nGreen: class in focus\nOrange: mocks for \ndependent classes\nGreen: class in focus\nOrange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nGreen: classes in focus \n(their integration)\n Orange: mocks for \ndependent classes\nRed: Stubs to interact \nlogically\nYellow: Spy \u2013 using the \n\u2018real\u2019 dependencies, when \nno stub implementation is \npresent\nIntegration testing\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n114\n\nSpring Test & Mockito\n\u2022\nMockito is a testing framework for Java applications (https://site.mockito.org/)\n\u2022\n Provides functionality for mocking, stubbing and spying\n\u2022\nSpring automatically includes Mockito and provides additional annotations like \n@MockBean and @SpyBean\n\u2022\nMock beans are automatically reset after each test method \u2013 otherwise behavioral test \nwould fail\n\u2022\nEvery test method annotated @Transactional is automatically rolled back (\u201ccaution \nshould be taken if Spring-managed or application-managed transactions are configured \nwith any propagation type other than REQUIRED or SUPPORTS.\u201d)\n\u2022\nspring-security-test starter adds additional functionality to the test environment for \naccess management or security related stuff\nWe included an example of another propagation type different to REQUIRED and SUPPORTS in our demo project under test/\u2026/MovieServiceTest\nJavaDoc source: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n115\n\nMockito at a glance\n\u2022\nGetting a mock object via mock(YourObject.class)\n\u2022\nMocking with Mockito \u2013 behavioral verification \u2013 selection of methods\n\u2022\nVerification for number of invocations (times(n), never(), only(), atLeastOnce(n), atLeast(n), atMost(n))\n e.g.verify(mockObject, times(1)).myServiceMethod();\n\u2022\nVerification of order of invocation: inOrder(mockA, mockB)\n\u2022\nVerification that no non-verified actions occurred: verifyNoMoreInteractions(mock)\n\u2022\nVerification that no interaction occurred: verifynoInteractions(mock)\n\u2022\nStubbing with Mockito \u2013 simulate logic of stubbed dependency\n\u2022\nStubbing, when a specific method is called\n\u2022\nOption to return a specific value, throw an exception or provide a callback implementation\n\u2022\nParameters can be set statically or via any(XY.class)\nwhen(pingPongPlayerMock.method(any(Ball.class)).thenReturn(\u201cVictory\u201d)\n\u2022\nOther options \u2026thenThrow(throwable)\n\u2022\nOther options \u2026thenAnswer(anwer/callback)\n\u2022\nMethod chaining is possible with thenXXX methods\n\u2022\nException: methods which return void\ndoXY().when(mock).voidMethod();\n\u2022\nSpying with Mockito \u2013 wrapping business objects to spies\n\u2022\nspy(object)\n\u2022\nStub and mock methods can be used on the returned or annotated object\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n116\n\nA possible test strategy\nThymeleaf\nRESTController\nService\nRepository\nIn-memory DB\nTest UI/User Interaction classes \nindependent to the other parts of \nthe application. Mock service and \ndatabase interactions.\n Make integration test since the \nrepositories are normally generated \nby Spring. Use an in-memory DB to \nspeed up tests (this helps you also \nto test transactions).\n Controller\n\u00a9 LION5 GmbH - Spring Boot as Enterprise Java Framework\n117\n\nMVC SpringBootTest (1/2)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MovieControllerTest {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate MovieService movieService;\n@BeforeEach\npublic void initCommonUsedData() {\n...\n}\n@Test\npublic void getRequestMovies_anonymousUser_redirectToLogin() \nthrows Exception {\nwhen(this.movieService.findAll(any(PageRequest.class)))\n .thenReturn(new PageImpl<>(this.movies));\nthis.mvc.perform(get(\"/movies\").with(anonymous()))\n.andExpect(status().is3xxRedirection())\n.andExpect(redirectedUrlPattern(\"**/login\"));\n}\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing\nIntegration tests with spring security: https://www.baeldung.com/spring-security-integration-tests\nSpringBootTest creates an \napplication context. It does not start \na server by default, only when port \nis configured via webEnvironment\nproperty (check the documentation)\nNeed a mocked web environment \nfor testing endpoints, i.e. thymeleaf\nAdd mock object to the application \ncontext\nJunit 5 annotation. Method is \nexecuted before each test method \n(mocks are reset by default)\n Testing GET request to movies \nendpoint as anonymous user.\n Result should be a redirect to login \npage.\n\nInput:\nYou are ugly and stupid!\nClassification:",
        "generated_answer": "Offensive",
        "timestamp": "2025-05-22T10:44:11",
        "group_id": "Team NNN"
    }
]